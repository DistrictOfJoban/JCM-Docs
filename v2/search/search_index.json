{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"contributing/documentation/","title":"Documentation","text":"<p>The pages you are seeing at this moment right now is hosted on the JCM-Docs github repository. It is powered by Material for Mkdocs and uses the Markdown format for writing.</p>"},{"location":"contributing/documentation/#adding-new-pages","title":"Adding new pages","text":"<p>To add a new page, simply add a new markdown (.md) file in the relevant location within the <code>docs</code> folder.</p> <p>The navigation tree of this site is located in the <code>nav</code> section within the <code>mkdocs.yml</code> in the root folder. As such, you also need to modify the relevant section in the yml to make your new page accessible in the navigation menu.</p>"},{"location":"contributing/documentation/#custom-pages","title":"Custom pages","text":"<p>Custom HTML templates (Like the Homepage we have) can be inserted by putting an ordinary html file to the <code>overrides</code> folder. Then, add the following to the top of the markdown pages you want to apply to: <pre><code>---\ntemplate: &lt;your_html_file&gt;.html\n---\n</code></pre></p> <p>You can also dynamically insert html content as Mkdocs uses Jinja as its templating engine.</p> <p>For an example, see:</p> <ul> <li><code>docs/index.md</code> and <code>overrides/home.html</code></li> <li><code>docs/nerds/neojcm/neojcm.md</code> and <code>overrides/neojcm.html</code></li> <li><code>docs/players/blocks/index.md</code> and <code>overrides/blocks.html</code></li> </ul>"},{"location":"contributing/introduction/","title":"Contributing","text":"<p>Thanks for considering to contribute to Joban Client Mod, below you'll find some information and rules regarding different type of contributions you could make!</p>"},{"location":"contributing/introduction/#bug-reporting","title":"Bug Reporting","text":"<p>Submitting a bug report is a great way to put lights on the issue you noticed that are not behaving correctly. To get started, head over to the  GitHub issues page and submit a new issue!</p>"},{"location":"contributing/introduction/#documentation","title":"Documentation","text":"<p>See  Documentation</p>"},{"location":"contributing/introduction/#translation","title":"Translation","text":"<p>See  Translation</p>"},{"location":"contributing/introduction/#project-changes","title":"Project changes","text":"<p>If there's changes you need to make that involves submitting changes to the main JCM Mod (Such as translation), you can check  Making changes to the project for further instructions!</p>"},{"location":"contributing/translation/","title":"Translation","text":"<p>We currently provide official translations for English, Chinese Simplified (zh_cn) and Chinese Traditional (zh_tw, zh_hk). Other translations are not officially maintained, but you may contribute by forking this project, adding the necessary translation files and submit a pull request here.</p>"},{"location":"contributing/translation/#categories","title":"Categories","text":""},{"location":"contributing/translation/#primary-translations","title":"Primary translations","text":"<p>Primary translations refers to translations that will appear with only Joban Client Mod (And it's dependencies, including MTR) installed. These are usually item and blocks translations, which is vital for the players.</p>"},{"location":"contributing/translation/#secondary-translations","title":"Secondary translations","text":"<p>Secondary translations refers to optional integration, these are usually mod integrations.</p> <p>Currently JCM supports Item Descriptions, which adds additional translations string to describe the block/item.</p> <p>As a contributor, you may work on either type of translations (or both!), however it is recommended to work on the primary translations first.</p> <p>The English translation file (The most up-to-date) is located in <code>fabric/src/main/resources/assets/jsblock/lang/en_us.json</code>, you may use that as a base and translate it to other languages. Text does not have to be translated literally, as long as the original meaning are not lost.</p>"},{"location":"contributing/project/","title":"Making changes to the project","text":"<p>Info</p> <p>This document is a work in progress!</p> <p>If you would like to make changes directly in the JCM repository, this is the right page! You'll find step by step instructions below.</p>"},{"location":"contributing/project/#making-a-fork","title":"Making a fork","text":"<p>For (well obvious) reasons, you would not be able to make changes directly to the JCM Repository. Instead, you can make a fork of this JCM Repository, which will create a new clone in your account that you can freely manipulate with.</p> <p>To be done =w=</p>"},{"location":"contributing/project/#where-to-start","title":"Where to start","text":"<ul> <li>Introduction to JCM Project Structure</li> </ul>"},{"location":"contributing/project/#code","title":"Code","text":"<ul> <li>Multiversion Development</li> <li>Code Guidelines</li> </ul>"},{"location":"contributing/project/#external-references","title":"External References","text":"<ul> <li>Fabric Documentation - Introduction to Fabric and Modding</li> </ul>"},{"location":"contributing/project/#submitting-your-change","title":"Submitting your change","text":"<p>Ok you've done the work, now what? Now, you can submit a Pull Request, which is essentially a request for your changes to be in the main JCM Repository.</p> <p>Usually after you have pushed your change, you can go into your forked repository and GitHub will prompt you to submit a Pull Request. </p> <p>You can click on that, then fill out the title and the description (Again don't stress yourself to write bunch of stuff, if it's a simple bug fix then 1-3 line is usually enough) </p> <p>After that, click on the \"Create Pull Request\" button, and providing I still maintain the project I'll have a look at it. Feel free to ping if you don't get a response within 7 days.</p> <p>If there's any changes that I would prefer to be made, I'll comment on that pull request and we can have a discussion there!</p> <p>Otherwise, I'll probably approve and merge your changes to the main branch, where it will be added in the next JCM versions!</p>"},{"location":"contributing/project/code_guidelines/","title":"Code Guidelines","text":"<p>Just personal preference, you can always make changes after your initial PR ^^</p>"},{"location":"contributing/project/code_guidelines/#naming-convention","title":"Naming Convention","text":"<p>Use Java naming convention (TLDR: InterfaceName, ClassName, fieldName, methodName, CONSTANT_VARIABLE)</p>"},{"location":"contributing/project/code_guidelines/#exception-and-error-handlingchecking","title":"Exception and error handling/checking","text":"<p>JCM employs some degree of Offensive Programming. This usually refers to the practice of trusting that your program would behave as expected and not adding unnecessary check \"just in case it goes wrong\".</p> <p>This has its pros and cons, notably the trade off between user inconvenience (JCM will for example almost always hard crash if an uncaught exception occured), and program correctness and easier to spot bugs.</p> <p>When investigating errors/exceptions, it is advised to dig through the root cause rather than blindly following the stacktrace. For example if you get a NullPointerException when calling some pieces of your code, you should figure out why and whether it should be possible for that value to be <code>null</code> in the first place, before adding a null-check.</p>"},{"location":"contributing/project/multiversion_development/","title":"Introduction to Multiversion Development","text":"<p>Note</p> <p>This page only applies to Joban Client Mod targeting MTR 4.0. Since the upcoming MTR 4.1, MTR mod no longer target multiple Minecraft versions, and the tooling mentioned in this page would likely be deprecated/no longer used.</p>"},{"location":"contributing/project/multiversion_development/#the-minecraft-mappings-project","title":"The Minecraft-Mappings Project","text":"<p>Minecraft Mappings is a project made for the MTR mod that allows cross version (1.16.5-1.20.4) and mod-loader compatibility with 1 single codebase. The basic idea is that you don't use Minecraft's code, instead use all the wrapper classes/method provided by Minecraft Mappings. (Which usually has the same name as Yarn mapping, under the <code>org.mtr.mapping</code> package)</p> <p>Minecraft Mappings are generated as a jar for each Minecraft version and mod-loader, where they all have the same classes/method, and only the underlying implementation is changed to adapt to different Minecraft versions, as such nothing needs to be changed when compiling to each Minecraft version.</p> <p>Note that not all method and classes can be mapped, for example one method could exist in 1.18.2 but not 1.17.1. As such, method that are guaranteed to exist across all version will be annotated with <code>@MappedMethod</code>, whereas other method that may not exist across all versions and mod-loaders will be annotated with <code>@Deprecated</code> (In which your IDE should give you a warning), don't use anything that's marked as deprecated as they may fail to compile across all versions and platform. When overriding method on classes provided by Minecraft Mappings, you should be overriding and calling methods made by Minecraft-Mappings (Sometimes named like <code>methodName2</code> or <code>methodName3</code>), these are methods provided by Minecraft Mappings, whereas <code>methodName</code> is usually the underlying method provided by Minecraft.</p> <p>Minecraft Mappings also provide helper classes (For example the Vanilla Registry) on components with radical changes between versions.</p>"},{"location":"contributing/project/multiversion_development/#theres-no-mapping-for-rendersystem-but-i-want-to-use-it","title":"There's no mapping for RenderSystem but I want to use it","text":"<p>For RenderSystem you can just use the class provided by Minecraft directly. Not all Minecraft's code are obfuscated, for example some of the code in <code>com.mojang.blaze3d</code> including RenderSystem is not obfuscated, a mapping like Yarn or Mojmap is not needed and there's a much less chance that the method name will differ across mod-loaders due to them using different mappings. If you really find yourself not being able to compile across all versions and mod-loaders when using code that's not provided by Minecraft Mappings, you can follow the section below.</p>"},{"location":"contributing/project/multiversion_development/#what-if-minecraft-mappings-doesnt-contain-the-code-i-want","title":"What if Minecraft Mappings doesn't contain the code I want","text":"<p>In general there are 2 options:</p> <ol> <li>Contribute to Minecraft-Mappings by following the instruction there.</li> <li>Use the manifold preprocessor to compile different code conditionally depending on the build configuration (Easy way out :P), see below for more information.</li> </ol>"},{"location":"contributing/project/multiversion_development/#manifold-preprocessor","title":"Manifold Preprocessor","text":"<p>This is a java preprocessor that is integrated to the Joban Client Mod projects for multi-target builds.</p>"},{"location":"contributing/project/multiversion_development/#usage","title":"Usage","text":"<p>To conditionally run a code, you can use the <code>#if</code> and <code>#endif</code> block: <pre><code>    #if MC_VERSION == \"11904\"\n        System.out.println(\"Now running on 1.19.4\");\n    #elif MC_VERSION == \"11802\"\n        System.out.println(\"Now running on 1.18.2\");\n    #else\n        System.out.println(\"Not running on 1.19.4 nor 1.18.2\"); \n    #endif\n</code></pre></p> <p>You can also compare the minecraft version: <pre><code>    #if MC_VERSION &gt; \"11904\"\n        System.out.println(\"Running on 1.19.4 or above (e.g. 1.20)\");\n    #else\n        System.out.println(\"Running below 1.19.4\"); \n    #endif\n</code></pre></p> <p>If you have the Manifold Plugin installed for IntelliJ, the code inside the <code>#if</code> and <code>#elif</code> block would have a distinct gray background, and there will not be any syntax highlighting.</p> <p>Available variable as follows:</p> Variable Name Description Example MC_VERSION The Minecraft version this build is for, in the format MAJOR(1)MINOR(2)PATCH(2) 11902 LOADER The modloader this build is for, possible values are <code>fabric</code>, <code>forge</code>, <code>neoforge</code> fabric <p>The preprocessing should target the main development configuration (Fabric, Latest MC Version).</p> <p>To avoid misleading IDE syntax error caused by code from other versions, the code for the main development configuration (Fabric, latest MC version) should be placed in the <code>#else</code> block.</p>"},{"location":"contributing/project/project_structure/","title":"Project Structure","text":"<p>JCM development happens on the Fabric modloader. Everything from source code modification and assets to testing in development environement should happen there. Forge/other modloaders are only for compiling, and contains modloader-specific code.</p> <p>The mod's code are located in <code>fabric/src/main/java/com/lx862/jcm/mod</code>, these files will be compiled by all modloaders. (If you have experience with Architectury, this is technically the common module)</p> <p>The assets are located in <code>fabric/src/main/resources/assets/jsblock</code>, these files are also used by both fabric and forge. Anything other than that is mod-loader specific.</p> <p>Because the main mod's code are located in the fabric module, you need to run <code>forge:setupFiles</code> in gradle to copy the source code from Fabric to Forge. This is done automatically when using GitHub action to compile.</p>"},{"location":"dev/pids/","title":"PIDS Preset","text":"<p>Joban Client Mod supports creating a custom PIDS Preset through the use of Resource Packs.  </p>"},{"location":"dev/pids/#defining-a-pids-preset","title":"Defining a PIDS Preset","text":"<p>To get started, first you need to create a Resource Pack that can be recognized by Minecraft.</p> <p>This can be done by creating a folder within your <code>.minecraft/resourcepacks</code> directory, then create a <code>pack.mcmeta</code> file with the following content: <pre><code>{\n    \"pack_format\": 13,// (1)!\n    \"description\": \"Your pack description here\"// (2)!\n}\n</code></pre></p> <ol> <li><code>pack_format</code> refers to which Minecraft version this resource pack is designed for, see Minecraft Wiki for a full list of numeric versions.</li> <li><code>description</code> is the text that will appear in the resource pack selection screen.</li> </ol> <p>Note on pack_format</p> <p>Unless your pack also involves modifying other bits of Minecraft, the <code>pack_format</code> you filled in <code>pack.mcmeta</code> does not affect the functionalities as JCM resources works the same across all Minecraft versions.</p> <p>Afterwards, create a new file named <code>joban_custom_resources.json</code> under <code>[Your Resource Pack Folder]/assets/jsblock</code>. You should create any folder in between if it doesn't exists. (So create <code>assets</code> in <code>[Your Resource Pack Folder]</code>, then create <code>jsblock</code> in <code>assets</code>)</p> <p>Within the json, fill the following as a basis:</p> <pre><code>{\n    \"pids_images\": [\n        {\n            \"id\": \"change_me\",\n            \"showWeather\": false,\n            \"showClock\": false,\n            \"background\": \"jsblock:change_me.png\"\n        }\n    ]\n}\n</code></pre> <p>As you can see, each PIDS Preset is defined as a JSON object within the <code>pids_images</code> array.</p>"},{"location":"dev/pids/#type-of-preset","title":"Type of Preset","text":"<p>There are 2 types of PIDS Preset:</p> <ul> <li>JSON PIDS Preset - Basic &amp; easy configuration</li> <li>Scripted PIDS Preset - Very customizable, but more difficult.</li> </ul> <p>All PIDS Preset are treated as a JSON PIDS Preset by default. For example, you can insert keys (<code>showWeather</code> and <code>showClock</code> in above) to configure the look of JSON PIDS Preset.</p> <p>As for Scripted PIDS Preset, all we need to do is to pass a <code>scriptFiles</code> string array, pointing to the script files. To learn more, please check out the Scripted PIDS Preset page.</p> <p>For the convenience, the chart below lists all available property within a PIDS Preset JSON object:</p> Property Name Description Possible values Default Version Added Preset Type <code>id</code> The unique ID for the preset Any string No default, must be filled v1.1.4+ All <code>name</code> The displayed name for the preset Any string The <code>id</code> property v2.0.0+ All <code>thumbnail</code> The thumbnail image for the preset, shown in UI Any string pointing to the texture JSON: <code>background</code> propertyScripted: <code>\"textures/gui/pids_preview_js.png\"</code> v2.0.0+ All <code>blacklist</code> The type of PIDS that are blacklisted from selecting this preset String JSON Array of any of the following:<code>\"rv_pids\"</code><code>\"rv_pids_sil_1\"</code><code>\"rv_pids_sil_2\"</code><code>\"lcd_pids\"</code><code>\"pids_projector\"</code><code>\"pids_1a\"</code> <code>[]</code> v2.0.0+ All <code>background</code> The background image of the preset Any string pointing to the texture No default, must be filled for JSON PIDS Preset v1.1.4+ JSON <code>color</code> The color of the text Color hex code string, i.e.<code>\"FFFFFF\"</code> <code>\"000000\"</code> v1.1.4+ JSON <code>fonts</code> The font used for text Any string pointing to the font <code>\"mtr:mtr\"</code> v1.1.4+ JSON <code>showWeather</code> Whether to show the weather icon <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ JSON <code>showClock</code> Whether to show clock text <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ JSON <code>hidePlatform</code> Whether platform number should be hidden (Override Hide Platform in per-block PIDS Config) <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ JSON <code>hideRow</code> Which row should be hidden (Override Hide Arrivals in per-block PIDS Config) Boolean JSON Array(Length: 4) <code>[false, false, false, false]</code> v1.1.5+ JSON <code>topPadding</code> Whether arrival should be pushed downwards for RV PIDS's top bar. <code>true</code> / <code>false</code> <code>true</code> v2.0.0+ JSON <code>textOverflowMode</code> Display mode when text exceeds its boundary <code>STRETCH</code> - Scale in the overflowing Axis<code>SCALE</code> - Scale in both axis <code>\"STRETCH\"</code> v2.0.0+ JSON <code>scriptFiles</code> The script files to load String JSON Array, pointing to the scripts to load. No default, must be filled to be considered Scripted PIDS Preset. v2.0.0+ Scripted"},{"location":"dev/pids/json_preset/","title":"JSON PIDS Preset","text":"<p>A JSON PIDS Preset provides simple tweak over the default MTR Railway Vision PIDS preset, using JSON property to modify the basic appearance of the PIDS.</p> <p>Things you can change:</p> <ul> <li>Visibility of Weather/Time</li> <li>Font used</li> <li>Font Color</li> <li>Background Images</li> <li>Hide arrival override (Since v1.1.5)</li> <li>Push arrival down even without hiding the arrivals (Since v1.1.5)</li> </ul> <p>For more detail of the implementation, you may download the Example Pack to learn more.</p> <p>Simply put the Variable Name mentioned above in your PIDS as custom text, and it will work.</p>"},{"location":"dev/pids/json_preset/#unique-properties-for-json-pids-preset","title":"Unique properties for JSON PIDS Preset","text":"Property Name Description Possible values Default Version Added <code>background</code> The background image of the preset Any string pointing to the texture No default, must be filled v1.1.4+ <code>color</code> The color of the text Color hex code string, i.e.<code>\"FFFFFF\"</code> <code>\"000000\"</code> v1.1.4+ <code>fonts</code> The font used for text Any string pointing to the font <code>\"mtr:mtr\"</code> v1.1.4+ <code>showWeather</code> Whether to show the weather icon <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ <code>showClock</code> Whether to show clock text <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ <code>hidePlatform</code> Whether platform number should be hidden (Override Hide Platform in per-block PIDS Config) <code>true</code> / <code>false</code> <code>false</code> v1.1.4+ <code>hideRow</code> Which row should be hidden (Override Hide Arrivals in per-block PIDS Config) Boolean JSON Array(Length: 4) <code>[false, false, false, false]</code> v1.1.5+ <code>topPadding</code> Whether arrival should be pushed downwards for RV PIDS's top bar. <code>true</code> / <code>false</code> <code>true</code> v2.0.0+ <code>textOverflowMode</code> Display mode when text exceeds its boundary <code>STRETCH</code> - Scale in the overflowing Axis<code>SCALE</code> - Scale in both axis <code>\"STRETCH\"</code> v2.0.0+"},{"location":"dev/pids/scripted/","title":"Scripted PIDS Preset","text":"<p>Scripted PIDS Preset is a new experimental feature introduced in JCM 2.0.0. It allows content developer to make new PIDS Preset using Javascript. The system is inspired by the Nemo Transit Expansion mod in MTR mod 3.x.</p>"},{"location":"dev/pids/scripted/#motivation","title":"Motivation","text":"<p>The most common questions I have received regarding PIDS Preset is Can I replicate X PIDS from this Metro?. Unfortunately the answer that had to be given is usually a no.</p> <p>This is due to the JSON PIDS Preset always following a fixed-layout consisted of a Header Bar (Weather &amp; Time), and 4 rows of arrivals. However metros around the world have different approaches to how they want to display their information, and given the combination it's not really feasible to just \"add a toggle\" for each layout seen around the world.</p> <p>Therefore, it is decided that building a platform that allows players around the world to express their creativity is the way forward.</p>"},{"location":"dev/pids/scripted/#why-not-use-json-format-to-express-custom-logic","title":"Why not use JSON format to express custom logic?","text":"<p>While many content developer are more familiar with JSON than JavaScript, the JSON format is too verbose to write conditional logic by plain text, and requires a GUI Editor to achieve anything functional in a productive manner (Which again, takes longer development time).</p> <p>A component/module based system is an option Which is actually what is internally used in JCM, however the component itself also needs to be configurable enough to allow all sorts of combinations, which sort of goes back to the \"add a toggle to everything\", just in a smaller scale. Whereas JS allows user to express their own custom logic, implemented in the way they wish.</p> <p>(And if custom logic are to be implemented in JSON anyway, it might be better to just go with an established programming language)</p> <p>This is also partially done to assess scripting in a larger-scale and the feasibility of porting scripting to future MTR mod versions.</p>"},{"location":"dev/pids/scripted/#will-the-json-format-stay-available","title":"Will the JSON Format stay available?","text":"<p>Don't worry, the JSON Format will remain available as a simplified form of customizing PIDS, and will not be removed anytime soon. It's just another type of preset that is available alongside Scripted PIDS Preset.</p>"},{"location":"dev/pids/scripted/#is-js-the-recommended-way-of-making-pids-preset-from-now-on","title":"Is JS the recommended way of making PIDS Preset from now on?","text":"<p>Please keep in mind that scripting is introduced as an experiment and we need your voice to tell whether it should be the way forward, so nothing is set in stone yet!</p>"},{"location":"dev/pids/scripted/#do-i-need-to-learn-javascript-to-make-this","title":"Do I need to learn JavaScript to make this?","text":"<p>Learning the syntax of the JavaScript Language is usually enough to get by. As JS is predominantly used on Websites and Server (Node.js), many tutorials covers those APIs specifically. However most of them are not available in JCM's scripting implementation.</p> <p>If you are unsure, you can also check out the following tutorial.</p>"},{"location":"dev/pids/scripted/#getting-started","title":"Getting started","text":"<p>For a practical tutorial, see Building a Scripted PIDS Preset.</p> <p>For documentation, please read the Documentation.</p> <p>If instead you would like to learn by example, you can download the Example Scripted Preset Resource Pack and inspect the scripts.</p>"},{"location":"dev/pids/scripted/tut/","title":"Building a Scripted PIDS Preset","text":"<p>This is a step-by-step tutorial on building a Scripted PIDS Preset using JavaScript.</p> <p>By the end of the tutorial, you would have built a Fictional LRT (Light Rail) version of the MTR Railway Vision PIDS, which can adapt to Custom PIDS Messages and handling long string.</p> <p></p> <p>(Top: Default RV PIDS Preset, Bottom: Custom JS-based PIDS Preset)</p>"},{"location":"dev/pids/scripted/tut/#prerequisite","title":"Prerequisite","text":"<p>Before beginning this tutorial, you should setup a world with MTR 4 installed:</p> <p>Note</p> <p>A fully operational route is not required. If your route jams, the tutorial can still continue, as long as there's any train on the route.</p> <ol> <li>Create a route with 2 stations:<ol> <li>1st station named <code>\u5c6f\u9580\u78bc\u982d|Tuen Mun Ferry Pier</code></li> <li>2nd station named <code>\u7530\u666f|Tin King</code></li> </ol> </li> <li>Name the route <code>\u8f15\u9435|Light Rail</code> with Route Number <code>507</code> and color code <code>00A650</code></li> <li>Place a single PIDS within your view distance, which can display the arrivals of the routes</li> <li>Create a siding, a depot, assign the route to the depot and configure the schedule so your vehicle departs.<ol> <li>Setting your siding to allow unlimited vehicles is benefical for this tutorial as you would mostly be viewing upcoming schedules. Unlimited vehicles prevents situations where you would run out of vehicles for the PIDS to display.</li> </ol> </li> </ol>"},{"location":"dev/pids/scripted/tut/#note","title":"Note","text":"<p>Before starting, please note that:</p> <ul> <li>Repeated/Irrelevant code may be abbreviated with the <code>// ...</code> comment notation.</li> <li> <ul> <li>Surrounding codes may be shown to ensure the readers don't get lost.</li> </ul> </li> <li>Over the course of this tutorial, we may insert or change codes in our script. The affected lines are highlighted in this documentation, indicating such lines needs updating.</li> <li>This article is best read with basic level of programming knowledge (Doesn't have to be JavaScript). You may still finish the tutorial without such knowledge, but may find some difficulty grasping some concept as this article is not meant to be a programming 101.</li> <li>You don't have to finish the tutorial in one go :)</li> </ul>"},{"location":"dev/pids/scripted/tut/#getting-started","title":"Getting started","text":"<p>To get started, download the tutorial resource pack here, extract the zip and put it in Minecraft's Resource Pack folder.</p> <p>This resource pack is specifically set-up for this tutorial, and therefore the JS scripts inside are (mostly) empty. However we can still take a look at how a Scripted PIDS Preset is set-up.</p>"},{"location":"dev/pids/scripted/tut/#joban_custom_resourcesjson","title":"joban_custom_resources.json","text":"<p>The file will look like this: <pre><code>{\n  \"pids_images\": [\n    {\n      \"id\": \"pids_tut\",\n      \"name\": \"DIY JS Preset\",\n      \"scriptFiles\": [\"jsblock:scripts/pids_tut.js\"]\n    }\n  ]\n}\n</code></pre></p> <p>This is mostly the same from a JSON PIDS Preset, except the <code>scriptFiles</code> property which is a JSON array that points to the scripts used for this preset.</p> <p>Multiple scripts can be used for the same preset as well. However to keep things simple, we are simply going to use 1 script to control the rendering: <code>scripts/pids_tut.js</code>.</p>"},{"location":"dev/pids/scripted/tut/#scriptspids_tutjs","title":"scripts/pids_tut.js","text":"<p>By opening up pids_tut.js in the scripts folder in a text editor (Notepad etc.), we can see the following script:</p> <pre><code>function create(ctx, state, pids) {\n  // Your custom logic here...\n}\n\nfunction render(ctx, state, pids) {\n  // Your custom logic here...\n}\n\nfunction dispose(ctx, state, pids) {\n  // Your custom logic here...\n}\n</code></pre> <p>Our custom logic can be placed between each curly brackets for each of the function. As seen, there are a total of 3 functions: <code>create</code>, <code>render</code>, <code>dispose</code>.</p> <ul> <li> <p>The <code>create</code> function is called when our PIDS enters the player's view. So this means that when a player switches the PIDS preset to our preset, or if a player is approaching a station with our PIDS in sight, everything within the curly bracket of the create function will be run.</p> </li> <li> <p>The <code>render</code> function is called every frame (So 60fps = 60 times per second). Notice the asterisk? Because running scripts simply takes time, even if a short amount of time. JCM will try to*, whenever possible, call your function every frame. However if there are too many scripts or your script is slow, then it may not be called every frame.</p> </li> <li> <p>The <code>dispose</code> function is called when a PIDS Preset is switched away from, or the PIDS is no longer in sight for the player. This can be used to do clean-up work in complex PIDS that stores texture etc.</p> </li> </ul> <p>The most useful one we are going to use is the <code>render</code> function, since this is where we can obtain up-to-date information and dynamically render our PIDS.</p> <p>But let's not get ahead of ourselves, and instead start from something very simple: A hello world script.</p>"},{"location":"dev/pids/scripted/tut/#hello-world","title":"Hello, World!","text":"<ol> <li>Open up <code>scripts/pids_tut.js</code> in your text editor (If you haven't already!)</li> <li>Let's insert <code>print(\"Hello World ^^\");</code> to the brackets within the <code>create</code> function.<ol> <li>This calls the <code>print</code> function with the argument <code>\"Hello World ^^\"</code>. The <code>print</code> function will output the message in our Minecraft console.</li> </ol> </li> <li>Insert <code>print(\"Goodbye World ^^;\");</code> within the <code>dispose</code> function as well.</li> </ol> <p>After insertion, your script file should look something like this:</p> pids_tut.js<pre><code>function create(ctx, state, pids) {\n    print(\"Hello World ^^\");\n}\n\nfunction render(ctx, state, pids) {\n    // Your custom logic here...\n}\n\nfunction dispose(ctx, state, pids) {\n    print(\"Goodbye World ^^;\");\n}\n</code></pre> <p>After that, we can press the keybind F3+T in Minecraft to reload our resource pack.</p> <p>Now look at your game console log, you should the following message:</p> <pre><code>[Scripting] Hello World ^^\n[Scripting] Hello World ^^\n</code></pre> <p>Notice how the message is printed 2 times? That's because PIDS in JCM (and MTR mod for that matter) are constructed in a way where each side is drawn separately.</p> <p>Therefore a normal PIDS would call the <code>create</code> function 2 times. This is normal behavior, you didn't do anything wrong!</p> <p>Next, let's try going very far away from the PIDS, to the point where you can visually no longer sees them. You will then notice the following 2 messages shows up in the console:</p> <pre><code>[Scripting] Goodbye World ^^;\n[Scripting] Goodbye World ^^;\n</code></pre> <p>There you have it, a very simple Hello World script running in JCM.</p> <p>So this concludes the Scripted PIDS tutorial, I hope that...</p>"},{"location":"dev/pids/scripted/tut/#no-where-are-you-going","title":"No where are you going!","text":"<p>ok I am sorry :&lt;</p> <p>Now let's actually draw the \"Hello World\" text onto the PIDS, because printing to the game console isn't considered exciting for most players apparently.</p> <p>We can insert the following code to the <code>render</code> function to draw a text with the content Hello World:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    Text.create().text(\"Hello World\").draw(ctx);\n}\n</code></pre> <p>If this looks confusing, we can also split it line by line in the code:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    Text.create()\n    .text(\"Hello World\")\n    .draw(ctx);\n}\n</code></pre> <p>Essentially this code:</p> <ul> <li>Creates a text object</li> <li>Set its text content to <code>Hello World</code></li> <li>Draw it to the game! (<code>ctx</code> is a provided parameter in the render function, more on that later)</li> </ul> <p>Note that even after splitting it line by line, it is still valid code! This is because a statement is only considered finish by ending it with a semicolon (<code>;</code>). In fact, it is recommended to split up the lines to maintain readability.</p> <p>Anyway now let's save the file, reload with F3+T and see what happens!</p> <p></p> <p>*checks date* It's not April Fools yet is it?</p> <p>ok ok our text actually do actually get rendered. The only problem is that the default text color is black. And as you might have figured out, black-on-black may not necessarily be a very visible color combination.</p> <p>So let's change our text to be rendered with the white color instead.</p> <p>The hex color code for a solid white color is <code>FFFFFF</code>, so we can add the following line to our text:</p> <p><code>.color(0xFFFFFF)</code> (<code>0x</code> is used to depict that the number is a hexadecimal number)</p> <p>So our text block should look something like this:</p> <pre><code>Text.create()\n.text(\"Hello World\")\n.color(0xFFFFFF)\n.draw(ctx);\n</code></pre> <p>Note that <code>.draw()</code> is the final command and you cannot append anything afterwards, so any setting must be appended before <code>.draw()</code>.</p> <p>Reload the resource pack again and we now see our text!</p> <p></p> <p>With this logic, we can append a second Text block to render a 2nd text as well:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    Text.create()\n    .text(\"Hello World\")\n    .color(0xFFFFFF)\n    .draw(ctx);\n\n    Text.create()\n    .text(\"Joban Client Mod v2!\")\n    .color(0xFFFFFF)\n    .draw(ctx);\n}\n</code></pre> <p> I mean it technically did render twice...</p> <p>But now they are overlapping and it's hard to see, let's move each of them apart. We can use the <code>.pos(x, y)</code> command to set the position of an element.</p> <p>By default, a text have a height of <code>9</code>, so we can append <code>.pos(0, 9)</code> to set the text position to 9 unit downwards:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    Text.create()\n    .text(\"Hello World\")\n    .color(0xFFFFFF)\n    .draw(ctx);\n\n    Text.create()\n    .text(\"Joban Client Mod v2!\")\n    .color(0xFFFFFF)\n    .pos(0, 9)\n    .draw(ctx);\n}\n</code></pre> <p>Does the text look a bit weird?</p> <p>You may have noticed the <code>J</code> sticking out like a sore thumb, this is unfortunately due to Minecraft's imperfection when rendering TTF font. It will work fine if you switch to Minecraft font or with most other text combination</p> <p></p>"},{"location":"dev/pids/scripted/tut/#rendering-arrivals","title":"Rendering Arrivals","text":"<p>During the tutorial, you might have noticed the <code>pids</code> object in the create/render/dispose function. This represents our PIDS object, where we can obtain arrivals and more from there.</p> <p>We can get a list of arrivals with <code>pids.arrivals()</code>, and then obtain the n<sup>th</sup> arrival info with the <code>.get(n)</code> function.</p> <p>So to obtain the first arrival entry, we can do so like this:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    let firstRowArrival = pids.arrivals().get(0);\n    // ... rest of your code\n</code></pre> <p>Remember, JavaScript is 0-based index. The first number starts from 0, then 1, and so on and so fourth...</p> <p>Now that we have obtained our first arrival entry, we can obtain a variety of information with it, includeing it's route/LRT number, arrival and departure time, the route it's running and much more!</p> <p>You may refer to the PIDS Scripting Documentation for more information, but we will also cover some of it in this tutorial.</p> <p>At the moment we are only interested in getting the destination (Where the train is going). We can do that by calling the <code>destination()</code> function in our arrival entry:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    let firstRowArrival = pids.arrivals().get(0);\n    let firstRowDestination = firstRowArrival.destination(); // This is a string!\n    // ... rest of your code\n</code></pre> <p>And now we can replace our previous <code>Hello World</code> text content with <code>firstRowDestination</code>:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    let firstRowArrival = pids.arrivals().get(0);\n    let firstRowDestination = firstRowArrival.destination();\n\n    Text.create()\n    .text(firstRowDestination)\n    .color(0xFFFFFF)\n    .draw(ctx);\n\n    Text.create()\n    .text(\"Joban Client Mod v2!\")\n    .color(0xFFFFFF)\n    .pos(0, 9)\n    .draw(ctx);\n}\n</code></pre> <p></p> <p>However before we continue, we now have a bit of road block developing:</p> <ol> <li>We are obtaining the first arrival here, but what if we don't have a first arrival? What if there's no train running? What if the client is still fetching the arrival infos?</li> <li>Imagine a script filled with <code>Text.create()</code>, how would you be able to easily tell which text is which?</li> </ol> <p>Let's tackle the 2nd problem first. One way to do it is to add JavaScript comments with <code>//</code> or <code>/* */</code>. However JCM also reserved a slot for comment, and that is within the <code>Text.create(string)</code> function. So as an example, you can do the following:</p> <pre><code>Text.create(\"1st row destination\") // &lt;----\n.text(firstRowDestination)\n.color(0xFFFFFF)\n.pos(0, 0)\n.draw(ctx);\n</code></pre> <p>The \"1st row destination\" text (in the above example) is purely cosmetic, and you can write any string within that. As such, this could be served as a slot for commenting. Whether this is preferable depends on your personal preferences.</p> <p>Now back to the first problem, you may have already noticed some error popping up in your console log during some part of the tutorial. This is because we are trying to obtain a non-existent arrival.</p> <p>For that, we can add a null check to ensure that the arrival exists first:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    let firstRowArrival = pids.arrivals().get(0);\n    if(firstRowArrival != null) { // Check if arrival exists first\n        let firstRowDestination = firstRowArrival.destination();\n\n        Text.create(\"1st row destination\")\n        .text(firstRowDestination)\n        .color(0xFFFFFF)\n        .pos(0, 0)\n        .draw(ctx);\n    }\n    // ... rest of the text\n}\n</code></pre> <p>Great! However while this might be fine for rendering 1 line of arrival, in practice we often have to display much more than that. While we could just copy and paste these codes, they are error-prune and a mess to modify.</p> <p>Making matters more complicated, different PIDS Block have it's own number of arrival entry it supports. For example, RV PIDS supports 4 rows, while PIDS 1A only supports 3 rows.</p> <p>One solution is to change this to a for-loop. We can use <code>pids.rows</code> to obtain how many rows the current PIDS block supports:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    for(let i = 0; i &lt; pids.rows; i++) { // Set i to 0. i++ if i &lt; pids.rows, otherwise don't run this anymore\n        let arrival = pids.arrivals().get(i); // &lt;---- Obtain nth row arrival\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(arrival.destination())\n            .color(0xFFFFFF)\n            .pos(0, i*9) // &lt;--- nth row * text height\n            .draw(ctx);\n        }\n    }\n}\n</code></pre> <p>The runs everything within the for loop for however many rows the pids has, setting the <code>i</code> variable to the n<sup>th</sup> time our code is executed.</p> <p>As such, we can use <code>i</code> to determine our Y position as well as which arrival to obtain.</p> <p></p> <p>Of course, if your layout is not designed to be dynamic, and are designed for a specific PIDS, you can hardcode a number in (e.g. <code>4</code>) instead of <code>pids.rows</code>.</p>"},{"location":"dev/pids/scripted/tut/#text-size-language-cycle","title":"Text size &amp; Language Cycle","text":"<p>To resize a text, we can use the <code>.scale(factor)</code> function to scale the text to be larger or smaller.</p> <p>In our case, we will scale it by 1.25x:</p> pids_tut.js<pre><code>/// ... code before\nText.create(\"Arrival destination\")\n.text(arrival.destination())\n.color(0xFFFFFF)\n.pos(0, i*9)\n.scale(1.25) // Scale the text by 1.25x\n.draw(ctx);\n/// ... code after\n</code></pre> <p></p> <p>The text does seems to be larger! But they are now too close to each other, and are really uncomfortable to look at.</p> <p>This is because earlier, we set the position of the text to be <code>.pos(0, i*9)</code>. However since our text is scaled, the text height is no longer <code>9</code>, but instead <code>9 (text height) * 1.25 (our scale)</code> = 11.25.</p> <p>While we could just change it to <code>11.25</code>, let's leave even more padding between each row for a better-look. Let's say each row should go 16.75 unit downwards:</p> pids_tut.js<pre><code>/// ... code before\nText.create(\"Arrival destination\")\n.text(arrival.destination())\n.color(0xFFFFFF)\n.pos(0, i*16.75)\n.scale(1.25)\n.draw(ctx);\n/// ... code after\n</code></pre> <p></p> <p>Much better! The last thing we have to deal with is handling different languages. Currently it's just displayed with everything including the pipe character, which is used by the MTR mod as a way to split languages apart.</p> <p>To cycle the string, we can wrap our destination string with the <code>TextUtil.cycleString(str)</code> function.</p> <p><code>TextUtil</code> is a utility method provided our of the box for us, you can check the Utilities page for more helper functions like these.</p> pids_tut.js<pre><code>/// ... code before\nText.create(\"Arrival destination\")\n.text(TextUtil.cycleString(arrival.destination()))\n.color(0xFFFFFF)\n.pos(0, i*16.75)\n.scale(1.25)\n.draw(ctx);\n/// ... code after\n</code></pre> <p>And there we go, now the text cycles!</p> <p></p> <p></p> <p>So to re-cap, our code should look similar to this:</p> pids_tut.js<pre><code>function create(ctx, state, pids) {\n    print(\"Hello World ^^\");\n}\n\nfunction render(ctx, state, pids) {\n    for(let i = 0; i &lt; pids.rows; i++) {\n        let arrival = pids.arrivals().get(i);\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(TextUtil.cycleString(arrival.destination()))\n            .color(0xFFFFFF)\n            .pos(0, i*16.75)\n            .scale(1.25)\n            .draw(ctx);\n        }\n    }\n}\n\nfunction dispose(ctx, state, pids) {\n    print(\"Goodbye World ^^;\");\n}\n</code></pre>"},{"location":"dev/pids/scripted/tut/#v1-not-too-bad-after-all","title":"v1: Not too bad after-all!","text":"<p>In the last section we've spent all that time rendering some black-on-white text, but still it doesn't really look good.</p> <p>The next thing we are going to do is to draw a background alongside the PIDS text. This is very similar to the way we make text, but we use <code>Texture</code> instead, as well as the <code>.texture(id)</code> function to specify the image we would draw:</p> pids_tut.js<pre><code>/// ... code before\nfunction render(ctx, state, pids) {\n    for(let i = 0; i &lt; pids.rows; i++) {\n        let arrival = pids.arrivals().get(i);\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(TextUtil.cycleString(arrival.destination()))\n            .color(0xFFFFFF)\n            .pos(0, i*16.75)\n            .scale(1.25)\n            .draw(ctx);\n        }\n    }\n\n    Texture.create(\"Background\")\n    .texture(\"jsblock:textures/block/pids/rv_default.png\") // (1)!\n    .draw(ctx);\n}\n/// ... code after\n</code></pre> <ol> <li><code>jsblock:textures/block/pids/rv_default.png</code> is the default image used for the built-in Railway Vision PIDS that comes with JCM.Of course, you are welcomed to bring your own images as well!</li> </ol> <p>Now reload the resource pack and...</p> <p></p> <p>On the surface it seems that the only thing wrong is the positioning &amp; sizing (Which to be fair, we didn't tell JCM the size, so it uses the default). However another problem is that the image is appearing over the text, which is not what you want for a background image.</p>"},{"location":"dev/pids/scripted/tut/#stacking-order","title":"Stacking Order","text":"<p>In JCM, every elements that gets drawn are rendered with their z-position incremented ever so slightly.</p> <p>Therefore, the 2nd element to be drawn is placed in-front of the 1st element.</p> <p>So the rule is pretty simple: Whoever gets rendered later are put in-front, and whoever gets rendered earlier are behind the one who are rendered later.</p> <p>With this logic, let's move our background image to the top of the render function, so that everything afterwards are drawn on in-front of the background.</p> pids_tut.js<pre><code>/// ... code before\nfunction render(ctx, state, pids) {\n    Texture.create(\"Background\")\n    .texture(\"jsblock:textures/block/pids/rv_default.png\")\n    .draw(ctx);\n\n    for(let i = 0; i &lt; 4; i++) {\n        let arrival = pids.arrivals().get(i);\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(TextUtil.cycleString(arrival.destination()))\n            .color(0xFFFFFF)\n            .pos(0, i*16.75)\n            .scale(1.25)\n            .draw(ctx);\n        }\n    }\n}\n/// ... code after\n</code></pre> <p></p> <p>Now we just need to resize the texture to stretch it through the entire screen.</p> <p>This can be done through the <code>.size(width, height)</code> function:</p> pids_tut.js<pre><code>/// ... code before\nTexture.create(\"Background\")\n.texture(\"jsblock:textures/block/pids/rv_default.png\")\n.size(80, 80)\n.draw(ctx);\n/// ... code after\n</code></pre> <p>Hmm <code>80, 80</code>? That's a square, not a rectangle like our PIDS screen?</p> <p>That's correct, this code indeed does not cover the entire screen. A Railway Vision PIDS uses the size 136w x 76h.</p> <p>While we could just change the size to <code>136, 76</code>, we can also obtain the size of the PIDS directly with the <code>pids</code> variable passed to our render function, specifically <code>pids.width</code> and <code>pids.height</code>:</p> pids_tut.js<pre><code>/// ... code before\nTexture.create(\"Background\")\n.texture(\"jsblock:textures/block/pids/rv_default.png\")\n.size(pids.width, pids.height)\n.draw(ctx);\n/// ... code before\n</code></pre> <p>This is useful both for readability purposes, as well as factoring in different sizes of PIDS. (An LCD PIDS screen is slightly smaller at 133w x 72h)</p> <p>And let's not forget setting our destination text color to black (<code>0x000000</code>, or just remove <code>.color</code> entirely as it's black by default anyway), as the background is now bright.</p> <p></p> <p>The background image itself appears to include a header bar, which our arrival text has not accounted for.</p> <p>A very straight forward fix is to just offset the text's Y position. To save you time, I have tested the value for you, and it is <code>13</code> is the sweet spot :)</p> pids_tut.js<pre><code>/// ... code before\nText.create(\"Arrival destination\")\n.text(TextUtil.cycleString(arrival.destination()))\n.pos(0, 13+(i*16.75))\n.scale(1.25)\n.draw(ctx);\n/// ... code before\n</code></pre> <p>Ok now things are getting crazy. Imagine if you give this to a friend for a reference, or even just you reading this a year later. Could you tell what that <code>13</code> is for, and why <code>i*16.75</code>?</p> <p>In such case, we should declare a variable to give our value a name:</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    // ...background\n\n    for(let i = 0; i &lt; 4; i++) {\n        let rowY = 13 + (i*16.75);\n\n        let arrival = pids.arrivals().get(i);\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(TextUtil.cycleString(arrival.destination()))\n            .pos(0, rowY)\n            .scale(1.25)\n            .draw(ctx);\n        }\n    }\n}\n</code></pre> <p>As for the <code>13</code>, since it won't be changed at runtime, we can use the <code>const</code> keyword to indicate that this is a constant variable and would never change:</p> pids_tut.js<pre><code>const HEADER_HEIGHT = 13;\n\nfunction create(ctx, state, pids) {\n    // ... code\n}\n\nfunction render(ctx, state, pids) {\n    // ... code before\n    for(let i = 0; i &lt; pids.rows; i++) {\n        let rowY = HEADER_HEIGHT + (i*16.75);\n        let arrival = pids.arrivals().get(i);\n        // ...\n    }\n    // ... code after\n}\n// ... code\n</code></pre> <p>Neat!</p> <p></p>"},{"location":"dev/pids/scripted/tut/#estimated-arrival-time-text","title":"Estimated Arrival Time Text","text":"<p>Showing the destination is cool, but wouldn't it be even better if players can see when does the next train arrives? Let's add that as well, following the regular RV PIDS Layout which aligns the text to the right-most screen.</p> <p>As we have learnt previously, we can get the width of the pids via <code>pids.width</code>, so what we could do is to set the text's <code>x</code> position to the width so that it renders at the end of the screen.</p> pids_tut.js<pre><code>function render(ctx, state, pids) {\n    // ... code for drawing background\n    for(let i = 0; i &lt; pids.rows; i++) {\n        let rowY = HEADER_HEIGHT + (i*16.75);\n        let arrival = pids.arrivals().get(i);\n        if(arrival != null) {\n            Text.create(\"Arrival destination\")\n            .text(TextUtil.cycleString(arrival.destination()))\n            .pos(0, rowY)\n            .scale(1.25)\n            .draw(ctx);\n\n            Text.create(\"Arrival ETA\")\n            .text(\"3 min\") // Dummy ETA text for now\n            .pos(pids.width, rowY)\n            .scale(1.25)\n            .draw(ctx);\n        }\n    }\n}\n</code></pre> <p>Note</p> <p>Here serves as another reminder that the contents we have rendered so far are drawn physically in the world.</p> <p>JCM does not create a texture for you to render the screen on, as such your elements can go out of the screen entirely, even out of the PIDS block itself.</p> <p> ... oh well that's a bit more than the end of screen ^^;</p> <p>Now the code is indeed doing what we told it to do: Render text at the end of the screen. However the issue is that under the default text configuration, the text is left-aligned, and thus the x we give it is just the starting point of the text.</p> <p> Illustration of the issue we are facing</p> <p>To fix the issue, we need to right-align the text, to do that we can simply append <code>.rightAlign()</code> to our text:</p> pids_tut.js<pre><code>// ... code before\nText.create(\"Arrival ETA\")\n.text(\"3 min\")\n.pos(pids.width, rowY)\n.scale(1.25)\n.rightAlign()\n.draw(ctx);\n// ... code after\n</code></pre> <p></p> <p>The text margin is still not perfect, but it's just a matter of doing some subtraction, which we can do later.</p> <p>Now let's move on to functionality: As we have previously established, we can obtain the arrival's destination text with the <code>destination()</code> function.</p> <p>An arrival entry have more functions than that. For a full list you can check ArrivalWrapper.</p> <p>For our purposes, we are going to use the <code>arrivalTime()</code> function. This returns the epoch time the train is arriving at (in millisecond), or in other word, how many millisecond (1/1000th of a second) have passed since 1 January 1970.</p> <p>This in of itself is not that useful, but we can use JavaScript's Date Object <code>Date.now()</code> to obtain the same thing, except referring to the time now. This also means we can use that to compare the time between now and the arrival time!</p> pids_tut.js<pre><code>// ... code before\nlet eta = arrival.arrivalTime() - Date.now(); // Difference between our estimated arrival time (future) and now\nText.create(\"Arrival ETA\")\n.text(eta) // Change the text to render our eta\n.pos(pids.width, rowY)\n// ... code after\n</code></pre> <p>Now you should see umm... big numbers rapidly counting down:</p> <p></p> <p>If you are lucky enough to have a train stopping during this (As seen above), you'll see that the number rolls to the negative. This is because the train have already arrived.</p> <p>So for example <code>-4721</code> here means that the train have already arrived for 4.721 second, while <code>43963</code> means that the train will arrive in 43.963 second, since the number is represented in millisecond (1/1000th of a second).</p> <p>As such, we can obtain the second remaining by dividing it by 1000:</p> pids_tut.js<pre><code>// ... code before\nlet eta = (arrival.arrivalTime() - Date.now()) / 1000;\nText.create(\"Arrival ETA\")\n.text(eta)\n// ... code after\n</code></pre> <p> </p> <p>Now we just need to round the number to get a full integer:</p> pids_tut.js<pre><code>// ... code before\nlet eta = Math.round((arrival.arrivalTime() - Date.now()) / 1000);\nText.create(\"Arrival ETA\")\n.text(eta)\n// ... code after\n</code></pre> <p>We could continue implementing like this, however I'll leave this as an exercise to the viewer after finish this tutorial :)</p> <p>Instead for now we can go the slightly lazy route: JCM have included a helper script by default, namely PIDSUtil, which have a function to automatically format ETA text.</p> <p>Here, we can use the <code>include()</code> function to import the PIDSUtil script:</p> pids_tut.js<pre><code>include(Resources.id(\"jsblock:scripts/pids_util.js\")); // Built-in script shipped with JCM\n// ... Rest of the script\n</code></pre> <p>Note</p> <p>We can only include scripts while JCM is parsing the script (i.e. Outside of function). It is not possible to put them in the <code>render</code> function for example, as by that time JCM has already finished parsing the entire script, and it's only calling your function.</p> <p>Now that we have imported the script, we can now use it's function, <code>PIDSUtil.getETAText(time: number)</code>:</p> pids_tut.js<pre><code>// ... code before\nText.create(\"Arrival ETA\")\n.text(PIDSUtil.getETAText(arrival.arrivalTime()))\n.pos(pids.width, rowY)\n.scale(1.25)\n.rightAlign()\n.draw(ctx);\n// ... code after\n</code></pre> <p>After reloading, you should see that it returns a raw string without any language separation. However more importantly the unit is correct. (mins/sec)</p> <p></p> <p>And as we have learnt from handling the destination text, we can wrap it with <code>TextUtil.cycleString()</code>:</p> pids_tut.js<pre><code>// ... code before\nText.create(\"Arrival ETA\")\n.text(TextUtil.cycleString(PIDSUtil.getETAText(arrival.arrivalTime())))\n// ... code after\n</code></pre> <p>And finally to not start a war, let's apply some spacing to both the destination and ETA text so it doesn't lean along the edge:</p> <p>pids_tut.js<pre><code>// ... code before\nText.create(\"Arrival destination\")\n// ... code\n.pos(8, rowY)\n// ... code\n\nText.create(\"Arrival ETA\")\n// ... code\n.pos(pids.width - 8, rowY)\n// ... code after\n</code></pre> </p>"},{"location":"dev/pids/scripted/tut/#v2-light-rail-light-rail-everywhere","title":"v2: Light Rail, Light Rail Everywhere!","text":"<p>Now it's time to add the light rail route symbol.</p> <p>First, let's move our destination text to the right, 30 unit to be exact, so we can reserve some space for our light rail symbol on the left:</p> pids_tut.js<pre><code>// ... code before\nText.create(\"Arrival destination\")\n// ...\n.pos(30, rowY)\n// ... code after\n</code></pre>"},{"location":"dev/pids/scripted/tut/#drawing-the-light-rail-symbol","title":"Drawing the Light Rail Symbol","text":"<p>For reference, this is the symbol used for Hong Kong Light Rail Route:</p> <p> This is a replica render of the symbol, but should look close-enough</p> <p>It is consisted of a pill with white-background, followed by a thick route colored border, and a black border inside that.</p> <p>To understand how we should approach this, let's take a look at the resource file provided in the tutorial resource pack, under <code>assets/jsblock/textures/lrr.png</code>:</p> <p> The texture quality itself is... not the greatest, but let me be lazy while I can get away with it :P</p> <p>Essentially this is just the above version, but without the centered white part, and the route color being white.</p> <p>The reason why it's white is because we will be tinting the texture color to follow our route color. An easier way to think of it is \"how white the color is = how bright the color is\".</p> <p>This means that the white-part will be colored to our route's color, while the black border remains black, because it's brightness is essentially 0%. No matter how you tint black, it's still black.</p> <p>As for the centered pill-shaped part, we have to draw it separately, as that part shall not be tinted with our route color. So let's get started!</p> pids_tut.js<pre><code>// ... code before\nTexture.create(\"LRT Circle Colored\")\n.texture(\"jsblock:textures/lrr.png\")\n.color(arrival.routeColor()) // Note this part!\n.pos(5, rowY)\n.size(23, 10)\n.draw(ctx);\n\nText.create(\"Arrival destination\")\n// ... code after\n</code></pre> <p>Essentially this draws our texture <code>jsblock:textures/lrr.png</code>, with the color set (or tinted) to the arrival's route color. The rest is just stuff we have learnt in the past :D</p> <p></p> <p>Nice, we are already 60% there. Now we just need to fill the white pill-shaped background.</p> <p>There are multiple ways to achieve that, but the one we are going to use in the tutorial is to layer a white rectangle behind the pill-shaped symbol:</p> <p> Imagine the green border as the border the white rectangle, which is placed behind our symbol</p> pids_tut.js<pre><code>// ... code before\nTexture.create(\"LRT Circle White\")\n.texture(\"mtr:textures/block/white.png\")\n.pos(7.5, rowY+1.5)\n.size(18, 6)\n.draw(ctx);\n\nTexture.create(\"LRT Circle Colored\")\n.texture(\"jsblock:textures/lrr.png\")\n// ... code after\n</code></pre> <p>Again, remember first to draw, first to be covered. It needs to be drawn first before the colored pill, so that it can stay behind the colored pill.</p> <p>(Self Note)</p> <p>Maybe it does make sense to implement <code>Rectangle</code> alongside <code>Text</code> and <code>Texture</code> as well... but for now this will do!</p> <p>Also worth nothing is the texture <code>mtr:textures/block/white.png</code>. This is a built-in texture in the MTR mod that's literally just a solid white color, which can coincidentally be used in this situation.</p> <p>Nothing note-worthy other than that however. The position and size is already given for the sake of this tutorial, but in practice you may need some trial and error to get it right.</p> <p>Now we just need to draw the route number, do it after we draw the pill so it stays on top:</p> pids_tut.js<pre><code>// ... code before\nTexture.create(\"LRT Circle Colored\")\n// ...\n.draw(ctx);\n\nText.create(\"LRT Number Text\")\n.text(arrival.routeNumber())\n.scale(0.55)\n.centerAlign()\n.pos(16.5, rowY+3)\n.draw(ctx);\n// .. code after\n</code></pre> <p>As for the platform number, here's the code as there's not a lot of things worth noting either:</p> pids_tut.js<pre><code>// ... code before\nText.create(\"Destination Text\")\n// ...\n.draw(ctx);\n\nTexture.create(\"Platform Circle\") // Draw our circle texture\n.texture(\"jsblock:textures/block/pids/plat_circle.png\") // Built-in to JCM\n.pos(79, rowY - 1)\n.size(10.5, 10.5)\n.color(0xD2A808) // #D2A808 is color for HK LRT Network\n.draw(ctx);\n\nText.create(\"Platform Circle Text\") // Draw the text\n.text(arrival.platformName()) // We can use platformName() to obtain the platform no.\n.pos(84, rowY + 1)\n.scale(0.9)\n.centerAlign()\n.color(0xFFFFFF) // #FFFFFF is white text\n.draw(ctx);\n// ... code after\n</code></pre> <p>Just to keep you in the loop (Pun intended), what we are doing so far is ran for each arrival row, because we have setup a for-loop at the top.</p> <p>So if you are going to render thing one-time on the screen, then you should place the logic outside this loop~</p> <p></p> <p>Not bad!</p>"},{"location":"dev/pids/scripted/tut/#v3-the-pids-called-they-wanted-their-header-bar-back","title":"v3: The PIDS called, they wanted their header bar back","text":"<p>The header bar refers to the blue bar seen at the top.</p> <p>The built-in RV PIDS preset in JCM contains a weather texture on the left, and a 24-hour clock on the right.</p>"},{"location":"dev/pids/scripted/tut/#weather-icon","title":"Weather Icon","text":"<p>There are 3 distinct texture for weather icon used in the default RV PIDS preset:</p> Image Preview Texture ID Used when <code>jsblock:textures/block/pids/weather_sunny.png</code> There's no rain nor thunderstorm in the current world. <code>jsblock:textures/block/pids/weather_rainy.png</code> There's rain, but not thunderstorm in the current world. <code>jsblock:textures/block/pids/weather_thunder.png</code> There's a thunderstorm in the current world. <p>As such, we need to use different texture depending on the situation.</p> <p>To check the weather for the current world, we can use the MinecraftClient class, which provides a couple of functions, namely <code>MinecraftClient.worldIsRaining()</code> and <code>MinecraftClient.worldIsThundering()</code>.</p> <p>We can then first declare a variable which represents the texture we are going to use, we are going to assign a value to it later:</p> pids_tut.js<pre><code>// ... code for drawing background\nlet weatherImg; // (1)!\n\nfor(let i = 0; i &lt; pids.rows; i++) {\n    // ... code for drawing arrival\n}\n</code></pre> <ol> <li>Note how we placed this outside the arrival for-loop. This is because we only want to draw this 1 time instead of per arrival.At the same time we need to draw this after the background, as we don't want the background to cover our image.</li> </ol> <p>Now we can start checking from the order thunderstorm &gt; raining &gt; sunny, and assign the appropriate texture ID:</p> <p>Checking Order</p> <p>The reason why we have to check in this order is because when a thunderstorm is active, it is also considered raining. As such we can't check if it's raining first, as otherwise it will always use the rainy texture.</p> <p>And finally if it's neither raining nor thundering, then the sky has to be clear.</p> pids_tut.js<pre><code>// ... code for drawing background\nlet weatherImg;\n\nif(MinecraftClient.worldIsThundering()) {\n    weatherImg = \"jsblock:textures/block/pids/weather_thunder.png\";\n} else if(MinecraftClient.worldIsRaining()) {\n    weatherImg = \"jsblock:textures/block/pids/weather_raining.png\";\n} else {\n    weatherImg = \"jsblock:textures/block/pids/weather_sunny.png\";\n}\n</code></pre> <p>Now, let's draw the texture with our <code>weatherImg</code> variable:</p> pids_tut.js<pre><code>    // ... code for checking weather icon\n    weatherImg = \"jsblock:textures/block/pids/weather_sunny.png\";\n}\n\nTexture.create(\"Weather Icon\")\n.texture(weatherImg)\n.pos(5, 0)\n.size(10, 10)\n.draw(ctx);\n</code></pre>"},{"location":"dev/pids/scripted/tut/#adding-a-clock","title":"Adding a clock","text":"<p>A clock is still a text, as such let's create another text object.</p> <p>To keep this tutorial in a reasonable length, we will use <code>PIDSUtil</code> again, which provides a utility function for us to call so we don't have to manually format the clock:</p> pids_tut.js<pre><code>// ... code for drawing weather icon\n.draw(ctx);\n\nText.create(\"Clock\")\n.text(PIDSUtil.formatTime(MinecraftClient.worldDayTime(), true)) // Note this here!\n.color(0xFFFFFF)\n.pos(pids.width - 5, 2)\n.scale(0.9)\n.rightAlign()\n.draw(ctx);\n</code></pre> <p>The function parameter is <code>PIDSUtil.formatTime(minecraftTime, shouldPadZero)</code>.</p> <p>We can fill the <code>minecraftTime</code> parameter with <code>MinecraftClient.worldDayTime()</code>, which obtains the Minecraft time in tick.</p> <p>As for <code>shouldPadZero</code>, we can set it to true so it returns something like <code>08:30</code> instead of <code>8:30</code>.</p> <p> Looking good!</p>"},{"location":"dev/pids/scripted/tut/#v4-go-ham","title":"v4: Go ham!","text":"<p>Right now things are looking very solid, but this is the MTR mod we are talking about, so things quickly falls apart when someone enter <code>Llanfair\u00adpwllgwyngyll\u00adgogery\u00adchwyrn\u00addrobwll\u00adllan\u00adtysilio\u00adgogo\u00adgoch</code> as their station name.</p> <p>\"Surely no one would do that, and it's their problem if they do\" Ok maybe you have a point, however now let's look at a real-world example, by renaming your destination station from <code>\u7530\u666f|Tin King</code> to <code>\u5929\u6c34\u570d|Tin Shui Wai</code></p> <p> ummm send help.</p>"},{"location":"dev/pids/scripted/tut/#limiting-text-size","title":"Limiting text size","text":"<p>As we had learnt, we can set the size of a texture with <code>size(w, h)</code> function. What you might not know however is that the same can actually be done with Text, try it out:</p> pids_tut.js<pre><code>Text.create(\"Arrival destination\")\n.text(TextUtil.cycleString(arrival.destination()))\n.pos(30, rowY)\n.size(36, 9)\n.scale(1.25)\n.draw(ctx);\n</code></pre> <p>After reloading, you'll notice that nothing has changed at all.</p> <p>This is intended. The text area actually did got defined, however by default JCM don't take any action if the text went beyond the area.</p> <p>To do so, we need to tell JCM what to do, with the <code>stretchXY()</code>, <code>scaleXY()</code>, <code>wrapText()</code> and <code>marquee()</code> function:</p> Function Description Preview <code>stretchXY()</code> The text will be stretched according to which axis it overflowed. So if it overflowed horizontally, the text will only be stretched horizontally <code>scaleXY()</code> The text will be stretched on both-axis to ensure that it stays within the defined size. Or in other word, it maintains the aspect ratio of the text. <code>wrapText()</code> Any text that overflowed will be rendered in the next line, this might be useful when rendering paragraphs of text. <code>marquee()</code> The text content is cropped to only show the visible section. The text will be continuously shifted to ensure that all portion of the text is shown. <p>For now, we'll go with <code>scaleXY()</code> as I think it looks nicer, you are free to try any other options however!</p> pids_tut.js<pre><code>Text.create(\"Arrival destination\")\n.text(TextUtil.cycleString(arrival.destination()))\n.pos(30, rowY)\n.size(36, 9)\n.scaleXY()\n.scale(1.25)\n.draw(ctx);\n</code></pre> <p></p> <p>Nice. Now, we can also apply the same logic to other texts as well:</p> pids_tut.js<pre><code>Text.create(\"LRT Number Text\")\n.text(arrival.routeNumber())\n.scale(0.55)\n.centerAlign()\n.size(26, 9)\n.scaleXY()\n.pos(16.5, rowY+2.75)\n.draw(ctx);\n</code></pre> pids_tut.js<pre><code>Text.create(\"Platform Circle Text\")\n.text(arrival.platformName()) // We can use platformName() to obtain the platform no.\n.size(9, 9)\n.scaleXY()\n.pos(84, rowY + 1)\n.scale(0.9)\n.centerAlign()\n.color(0xFFFFFF)\n.draw(ctx);\n</code></pre> pids_tut.js<pre><code>Text.create(\"ETA Text\")\n.text(TextUtil.cycleString(PIDSUtil.getETAText(arrival.arrivalTime())))\n.scale(1.25)\n.size(30, 9)\n.scaleXY()\n.rightAlign()\n.pos(pids.width - 8, rowY)\n.draw(ctx);\n</code></pre>"},{"location":"dev/pids/scripted/tut/#v5-its-coming-together","title":"v5: It's coming together","text":"<p>At this point if you are developing this PIDS Preset for your own use, you should have learned most of the basics, and you may start to modify the code to suit your need.</p> <p>However if you are planning to publish a PIDS Preset for others to use, you have to also account for the variety of different configuration people uses. Most notably, each PIDS Block has it's own config, such as Custom Messages, Hide Arrivals, Hide Platform Number etc.</p> <p>This section will go through how to take these configs into account as well.</p>"},{"location":"dev/pids/scripted/tut/#custom-message","title":"Custom Message","text":"<p>We can obtain the custom message of the n<sup>th</sup> row by using the function <code>pids.getCustomMessage(n)</code></p> <p>If a custom message exists, it will return the custom message.</p> <p>Otherwise, it will return an empty string (\" \")</p> <p>Therefore, we can check whether that row have custom messages, and draw them differently depending on the situation:</p> pids_tut.js<pre><code>// ... code before\nlet rowY = HEADER_HEIGHT + (i*16.75);\nlet customMsg = pids.getCustomMessage(i);\nif(customMsg != \"\") { // Have custom message\n    Text.create(\"Custom Text\")\n    .text(TextUtil.cycleString(customMsg))\n    .scale(1.25)\n    .size(pids.width-10, 9) // -10 to account for padding on both sides\n    .scaleXY()\n    .pos(5, rowY)\n    .draw(ctx);\n} else { // No custom message, continue the rest of arrival row logic\n    let arrival = pids.arrivals().get(i);\n    if(arrival != null) {\n        Texture.create(\"LRT Circle White\")\n        // ... code after\n</code></pre>"},{"location":"dev/pids/scripted/tut/#hide-platform-number","title":"Hide Platform Number","text":"<p>The <code>isPlatformNumberHidden()</code> function in the <code>pids</code> parameter returns whether platform number should be shown or not. Therefore, we can wrap it inside an if statement, and only draw the platform number if it is not hidden.</p> pids_tut.js<pre><code>// ... code before\nif(!pids.isPlatformNumberHidden()) { // If platform number is not hidden\n    Texture.create(\"Platform Circle\")\n    .texture(\"jsblock:textures/block/pids/plat_circle.png\")\n    // ... code for drawing platform circle &amp; platform number text\n}\n// ... code after\n</code></pre>"},{"location":"dev/pids/scripted/tut/#hide-arrival","title":"Hide Arrival","text":"<p>Finally, we can use the <code>pids.isRowHidden(n)</code> function to determine whether arrival is set to hidden for that row. Once again, we can wrap it in an <code>if</code> statement, and let's put it together with the arrival null check as well!</p> pids_tut.js<pre><code>// ... code before\nlet arrival = pids.arrivals().get(i);\nif(arrival != null &amp;&amp; !pids.isRowHidden(i)) { // have arrival &amp; row not hidden\n    // ... Our arrival rendering logic\n</code></pre>"},{"location":"dev/pids/scripted/tut/#conclusion","title":"Conclusion","text":"<p>Congratulations! You have just built your custom PIDS preset from scratch!</p> <p>Here's the full code for your reference (May differ slightly, but logic should mostly be same):</p> pids_tut.js<pre><code>include(Resources.id(\"jsblock:scripts/pids_util.js\")); // Built-in script shipped with JCM\nconst HEADER_HEIGHT = 13;\n\nfunction create(ctx, state, pids) {\n    print(\"Hello World ^^\");  // Only for testing, can remove\n}\n\nfunction render(ctx, state, pids) {\n    Texture.create(\"Background\")\n    .texture(\"jsblock:textures/block/pids/rv_default.png\")\n    .size(pids.width, pids.height)\n    .draw(ctx);\n\n    // Top Bar\n    // Draw weather icon\n    let weatherImg;\n    if(MinecraftClient.worldIsThundering()) {\n        weatherImg = \"jsblock:textures/block/pids/weather_thunder.png\";\n    } else if(MinecraftClient.worldIsRaining()) {\n        weatherImg = \"jsblock:textures/block/pids/weather_raining.png\";\n    } else {\n        weatherImg = \"jsblock:textures/block/pids/weather_sunny.png\";\n    }\n\n    Texture.create(\"Weather Icon\")\n    .texture(weatherImg)\n    .pos(5, 0)\n    .size(10, 10)\n    .draw(ctx);\n\n    Text.create(\"Clock\")\n    .text(PIDSUtil.formatTime(MinecraftClient.worldDayTime(), true))\n    .color(0xFFFFFF)\n    .pos(pids.width - 5, 2)\n    .scale(0.9)\n    .rightAlign()\n    .draw(ctx);\n\n    // Arrivals\n    for(let i = 0; i &lt; pids.rows; i++) {\n        let rowY = HEADER_HEIGHT + (i*16.75);\n        let customMsg = pids.getCustomMessage(i);\n        if(customMsg != \"\") {\n            Text.create(\"Custom Text\")\n            .text(TextUtil.cycleString(customMsg))\n            .scale(1.25)\n            .size(pids.width - (5*2), 9)\n            .scaleXY()\n            .pos(5, rowY)\n            .draw(ctx);\n        } else {\n            let arrival = pids.arrivals().get(i);\n            if(arrival != null &amp;&amp; !pids.isRowHidden(i)) {\n                Texture.create(\"LRT Circle White\")\n                .texture(\"mtr:textures/block/white.png\")\n                .pos(7.5, rowY+1.5)\n                .size(18, 6)\n                .draw(ctx);\n\n                Texture.create(\"LRT Circle Colored\")\n                .texture(\"jsblock:textures/lrr.png\")\n                .color(arrival.routeColor())\n                .pos(5, rowY)\n                .size(23, 10)\n                .draw(ctx);\n\n                Text.create(\"LRT Number Text\")\n                .text(arrival.routeNumber())\n                .scale(0.55)\n                .centerAlign()\n                .size(26, 9)\n                .scaleXY()\n                .pos(16.5, rowY+3)\n                .draw(ctx);\n\n                Text.create(\"Arrival Destination\")\n                .text(TextUtil.cycleString(arrival.destination()))\n                .scale(1.25)\n                .size(36, 9)\n                .scaleXY()\n                .pos(30, rowY)\n                .draw(ctx);\n\n                if(!pids.isPlatformNumberHidden()) {\n                    Texture.create(\"Platform Circle\")\n                    .texture(\"jsblock:textures/block/pids/plat_circle.png\")\n                    .pos(79, rowY - 1)\n                    .size(10.5, 10.5)\n                    .color(0xD2A808) // Hong Kong LRT Network Color\n                    .draw(ctx);\n\n                    Text.create(\"Platform Circle Text\")\n                    .text(arrival.platformName())\n                    .pos(84, rowY + 1)\n                    .size(9, 9)\n                    .scaleXY()\n                    .scale(0.9)\n                    .centerAlign()\n                    .color(0xFFFFFF)\n                    .draw(ctx);\n                }\n\n                Text.create(\"ETA Text\")\n                .text(TextUtil.cycleString(PIDSUtil.getETAText(arrival.arrivalTime())))\n                .scale(1.25)\n                .size(30, 9)\n                .scaleXY()\n                .rightAlign()\n                .pos(pids.width - 8, rowY)\n                .draw(ctx);\n            }\n        }\n    }\n}\n\nfunction dispose(ctx, state, pids) {\n    print(\"Goodbye World ^^;\"); // Only for testing, can remove\n}\n</code></pre>"},{"location":"dev/pids/scripted/tut/#what-to-do-next","title":"What to do next","text":"<p>Now you can check out the Scripting Documentation to see what other functions and information you can obtain.</p>"},{"location":"dev/pids/scripted/tut/#additional-challenges","title":"Additional Challenges","text":"<p>Some things are intentionally left-out in this tutorial, which can mostly be attributed to my laziness, but nevertheless they also serve as a great opportunity for a bonus challenge:</p> <p>On multiple occasions we have used PIDSUtil to obtain for example ETA Text, formatting clock etc.</p> <p>Now can you create your own function to replace the use of PIDSUtil?</p>"},{"location":"dev/pids/scripted/tut/#pidsutilgetetatextarrivalms","title":"PIDSUtil.getETAText(arrivalMs)","text":"Tips <ul> <li>Check if arrival second is &lt;= 0, if so return an empty string.</li> <li>If arrival second less than 60, return <code>&lt;etaSec&gt; \u79d2|&lt;etaSec&gt; sec</code>.</li> <li>If arrival second less than 120, return <code>&lt;etaMin&gt; \u5206\u9418|&lt;etaMin&gt; min</code>.</li> <li>Otherwise, return <code>&lt;etaMin&gt; \u5206\u9418|&lt;etaMin&gt; mins</code>.</li> <li>Use <code>Math.floor</code> and <code>Math.ceil</code> to round down/up numbers.</li> </ul>"},{"location":"dev/pids/scripted/tut/#pidsutilformattimemctime","title":"PIDSUtil.formatTime(mcTime)","text":"Tips <ul> <li>Every in-game hour is <code>50</code> second in real life, or exactly <code>1000</code> ticks.</li> <li>Minecraft Time is <code>0</code> at <code>06:00</code>, add <code>6000</code> ticks to the Minecraft time before doing calculations.</li> <li>Convert a number to string with <code>.toString()</code> function.</li> <li>Pad zero digits on a string with <code>.padStart(2, '0')</code>.</li> </ul>"},{"location":"dev/pids/scripted/tut/#show-car-length-if-arrivals-have-mixed-car-length","title":"Show car length if arrivals have mixed car length","text":"Tips <ul> <li>Read the PIDS Scripting Documentation to see whether there's a function to determine if arrivals have mixed car length.</li> <li>Use <code>PIDSUtil.getCarText(carLength)</code> function to obtain the car text.</li> <li>Append the car text to the ETA string with a <code>|</code> so that it cycles through both car-text and ETA-text!</li> </ul>"},{"location":"dev/pids/scripted/tut/#ending","title":"Ending","text":"<p>This concludes the PIDS tutorial. If you have any question or feedback, please don't hesitate to send it either in the District of Joban discord server, in the JCM thread in the Minecraft Transit Railway server, or submit a github issue! See you by then~ ^-^</p> <p>- LX</p>"},{"location":"dev/scripting/","title":"Scripting Documentation","text":"<p>Info</p> <p>This page serves as a documentation for the whole scripting system implemented in JCM, which includes Eyecandy/Decoration Block Scripting and PIDS Scripting.</p> <p>JCM Scripting is a feature introduced in JCM v2.0.0. It serves as a testbed for scripting in MTR 4, as well as using JavaScript to control PIDS.</p> <p>The system itself is heavily influenced by the Nemo Transit Expansion mod and shares much of the similarities. As such, most of the documentation include this page is also referenced from the NTE JS documentation.</p>"},{"location":"dev/scripting/#introduction","title":"Introduction","text":""},{"location":"dev/scripting/#what-is-javascript","title":"What is JavaScript?","text":"<p>JavaScript is a programming language that... in very simple terms, instructs computer to do stuff :D</p> <p>It can describe logic, an example would be: If there's pineapple on top of the pizza, then remove the pineapple and eat the pizza, otherwise eat the pizza.</p> <p>This rest of this article assumes that you have a basic understanding of JavaScript and JavaScript types, so it won't delve into the basic syntax and other aspects of it here. You can learn JavaScript from resources on the web, such as here.</p>"},{"location":"dev/scripting/#the-nature-of-scripting-in-jcm","title":"The Nature of Scripting in JCM","text":"<p>While JavaScript is commonly associated with webpages or even server applications (via Node.js), JCM's implementation of JavaScript only utilize the language itself.</p> <p>As such, this means that you only really need to care about the syntax (e.g. Variable &amp; Function Declaration, conditional logic) as well as base object such as Date. Other stuff such as HTML/CSS/DOM manipulation does not apply to JCM Scripting.</p> <p>Keep that in mind, as IDE (Such as Visual Studio Code) may assume you are developing for a webpage and provides suggestions that are not applicable to JCM/NTE scripting!</p>"},{"location":"dev/scripting/#do-i-have-to-learn-java-to-write-javascript","title":"Do I have to learn Java to write JavaScript?","text":"<p>JavaScript does not have anything, or not much to do with Java at all, even though they share \"Java\" in the name.</p>"},{"location":"dev/scripting/#but-can-i-use-java-in-javascript","title":"But can I use Java in JavaScript?","text":"<p>Under normal circumstances, no.</p> <p>However the JavaScript Engine that JCM/NTE uses, Rhino, do allow using classes from the standard Java library as <code>java.package.name</code>. Using classes from the MTR mod is not available yet, most likely due to problems with the class loader.</p>"},{"location":"dev/scripting/#script-flow","title":"Script Flow","text":""},{"location":"dev/scripting/#initial-parsing","title":"Initial Parsing","text":"<p>Instead of each train or block having it's own script instance, your JS scripts are parsed (Or rather, executed) once during the resource pack loading.</p> <p>Your script are expected to have functions with specific name (e.g. <code>create()</code>, <code>render()</code>, <code>dispose()</code>).</p> <p>These functions will be invoked by JCM/NTE with the parameter corresponding to a specific train/eyecandy/object, including a parameter (state) where you can store variables to that specific train.</p> <p>Consider the following example of scripting applied to a train:</p> <p><pre><code>let displaySpeed = 1;\n\nfunction create(ctx, state, train) {\n     state.displaySpeed = 0.75;\n}\n\nfunction render(ctx, state, train) {\n     state.displaySpeed++;\n     console.log(\"dp: \" + state.displaySpeed);\n}\n\nfunction dispose(ctx, state, train) {\n}\n\nconsole.log(displaySpeed);\n</code></pre> An example output would be: <pre><code>1 // The console.log at the bottom of the script, as the entire script is executed once during resource reload\n\ndp: 1.75 // Train A rendering\ndp: 2.75 // Train A rendering\n\n// Assume Train B now enters the view\n\ndp: 3.75 // Train A rendering\ndp: 1.75 // Train B rendering\n\ndp: 4.75 // Train A rendering\ndp: 2.75 // Train B rendering\n</code></pre></p>"},{"location":"dev/scripting/#execution","title":"Execution","text":"<p>An example flow is available below. This chart assumes the player is running Minecraft at 13fps (For simplicity sake), which means 13 frames in 1 second.</p> <p></p> <p>Immediately you may have noticed the following thing:</p>"},{"location":"dev/scripting/#scripts-are-executed-asynchronously","title":"Scripts are executed asynchronously","text":"<p>This means that the script runs in the background and does not prevent the game from continue rendering (Therefore, less fps lag).</p> <p>Warning</p> <p>This does not mean you can freely block script execution or run some <code>Thread.Sleep</code>, as you would then be blocking the script execution thread, making others (and your) script run slower!</p>"},{"location":"dev/scripting/#scripts-are-executed-every-frame","title":"Scripts are executed every frame","text":"<p>More precisely, the <code>render()</code> function is executed every frame.</p> <p>If there's a lag spike (Seen in Frame 8), your script would be not be called until the next frame came around, which is 154ms later in the above example.</p> <p>As such, you should not assume that your function will always be called \"x times per second\", or \"xx ms after the last one\".</p> <p>This also means that if you increment a variable by a fixed amount for each frame, that increment speed won't be the same if the fps is higher/lower.</p> <p>Delta timing is used to solve this by obtaining the time since last frame, which can then be used to balance out the value.</p>"},{"location":"dev/scripting/#except-they-arent-always-executed-every-frame","title":"Except they aren't always executed every frame!","text":"<p>While JCM tries to call the <code>render()</code> function for every frame, it is only made on a best-effort basis. If your script has not finished executing before the next frame came around, then your function won't be called again until it has finished execution.</p>"},{"location":"dev/scripting/#errors","title":"Errors","text":"<p>Note</p> <p>Script errors are currently not displayed within the game (Like NTE had with debug mode), you need to check for errors in the game log, usually accessible by your launcher</p> <p>If the script is executed incorrectly, an error will be reported in the Minecraft log (Starting with <code>[Scripting] Error executing script!</code>).</p> <p>The error message will indicate which line of code in which script file the error occurred. Most launchers have the ability to display logs in a separate window in real time.</p> <p>The script execution engine will then pause the entire script for 4 seconds before trying to execute the function again.</p>"},{"location":"dev/scripting/#documentation-format","title":"Documentation Format","text":"<p>As you know, values \u200b\u200bin JS have different types. When calling a function, you must pass parameters of the appropriate type, and the result it returns will also have a type. In this article, all of the functions have their parameter and return types stated.</p> <p>This scripting documentation will follow the following example:</p> <pre><code>static Resources.id(idStr: string): Identifier\n</code></pre> <ul> <li><code>static</code> means that you don't need to create an object to use this function, you can call <code>Resources.id(\"aaa:bbb\")</code> directly.</li> <li><code>idStr: string</code> means that the <code>idStr</code> parameter accepts a string.</li> <li><code>: Identifier</code> means that a function call will return a value of type <code>Identifier</code>.</li> </ul> <p>And here's another example: <pre><code>Matrices.rotateX(radian: float): void\n</code></pre></p> <ul> <li>The lack of <code>static</code> means that an object is required to execute the function. For example, if <code>a</code> is an object of Matrices type, then the function can be called as <code>a.rotateX(Math.PI)</code>.</li> <li><code>radian: float</code> means that the parameter takes a numeric argument. Although JS does not distinguish between integers and fractional numbers, this article will specify a specific type - <code>int</code>, <code>long</code>, <code>float</code> or <code>double</code> - to make it clear whether a parameter can accept decimal parts and to what precision.</li> <li><code>: void</code> means that the function has no return value.</li> </ul>"},{"location":"dev/scripting/#access-of-java-class","title":"Access of Java class","text":"<p>To prevent misuse of scripts, script may only access java classes from the following packages:</p> <ul> <li><code>com.lx862.jcm.mod.scripting.*</code></li> <li><code>java.lang</code></li> <li><code>java.awt</code></li> <li><code>java.util</code></li> <li><code>java.time</code></li> <li><code>java.math</code></li> <li><code>javax.imageio</code></li> <li><code>sun.java2d.*</code></li> <li><code>sun.font</code></li> <li><code>org.mtr</code></li> </ul>"},{"location":"dev/scripting/#tips-notes","title":"Tips &amp; Notes","text":""},{"location":"dev/scripting/#declaring-variables-using-let-or-var","title":"Declaring variables using let or var","text":"<p>Both JCM/NTE uses JavaScript's strict mode, which does not allow variables to be assigned without first declaring them.</p> <p>This means you can't do <code>local = 1</code> and expect <code>local</code> to be automatically defined.</p> <p>Instead, you have use syntax like <code>var glb;</code> or outside a function <code>var glb = 1;</code>. For local variables inside a function, use <code>let local;</code> or <code>let local = 1;</code>.</p> <p>Translator Note</p> <p>In general, it is better to always try to use <code>let</code> and resort to using <code>var</code> as a last resort.</p>"},{"location":"dev/scripting/#dont-block-or-infinitely-loop","title":"Don't Block Or Infinitely Loop","text":"<p>The function you wrote are called once per frame by JCM, where  your function is expected to finish processing and return a value as soon/fast as possible. As such, there's no such concept as \u201cwait for a while before continue executing\u201d.</p> <p>Instead, what you likely want is to \"do a thing later on\", in such case you will need to time it and then execute the appropriate action on a call made at the right time.</p> <p>If you are trying to execute a long-running operation (e.g. Fetching data over the internet), you should submit it to another thread/executor.</p> <p>If blocks or infinite loops did occur, then the entire script execution will stall as scripts are executed one at a time [in the same thread]. In such situation, you can reset it by pressing F3+T on your keyboard, which reloads the resource pack and resets the scripting thread.</p>"},{"location":"dev/scripting/#interoperability-between-java-classesmethods","title":"Interoperability between Java Classes/Methods","text":"<p>For common function types such as strings, Java and JavaScript have different class implementations, which causes there to be JavaScript strings as well as Java strings.</p> <p>NTE/MTR functions and fields return Java string classes rather than JavaScript strings, but Rhino does some conversions automatically, so in most cases you can mix and match, but sometimes this can cause problems.</p> <p>For example, here's an example of a problem caused by using <code>str.length()</code> from a Java string class and <code>str.length</code> from a JavaScript string class to get the length of a string:</p> <p><pre><code>var stationName = train.getThisRoutePlatforms().get(0).station.name;\nprint(stationName.length); // Error: stationName is a Java string, not a JavaScript string\nprint(stationName.length()); // Java strings get their length from the length() function, not the JavaScript length field\nprint((\"\"+stationName).length) // Use \"\"+ to turn it into a JavaScript string.\n</code></pre> Similarly, there is a <code>List&lt;T&gt;</code> type in Java. It does the same thing as arrays in JavaScript, but has a different type. Trying to call JavaScript array functions on it won't work, but Rhino adapts it so that you can take values with <code>list[0]</code> or loop through them with <code>for (a of list)</code>.</p>"},{"location":"dev/scripting/#what-javascript-features-are-supported","title":"What JavaScript features are supported?","text":"<p>The Rhino JavaScript Engine does not support all of the latest JavaScript features. See Mozilla's documentation for details on what is supported. JCM uses Rhino 1.7.15 with the <code>VERSION_ES6</code> flag enabled.</p>"},{"location":"dev/scripting/#including-other-scripts","title":"Including Other Scripts","text":"<p>By calling the function below, you can include and execute other JavaScript files.</p> Functions Description <code>static include(relPath: String): void</code> Loads and runs another JS file relative to the current JS file. <code>static include(path: Identifier): void</code> Loads and runs the JS file by location in the resource pack.For example: <code>include(Resources.id(\u201cmtr:path/absolute.js\u201d))</code>."},{"location":"dev/scripting/#referenced-sources","title":"Referenced sources","text":"<ul> <li>https://wiki.minecrafttransitrailway.com/mtr_addon:nte:js:start</li> </ul>"},{"location":"dev/scripting/dynamic_textures/","title":"Dynamic Textures","text":"<p>NTE provides a GraphicsTexture class to use JS-controlled textures with dynamic content on models for LCD displays, blinking indicators, scrolling text LED, and so on.</p>"},{"location":"dev/scripting/dynamic_textures/#graphicstexture","title":"GraphicsTexture","text":"Functions And Objects Description <code>new GraphicsTexture(width: int, height: int)</code> To create a dynamic texture, you need to specify the width and height.If you plan to draw contents related to per-block/per-train, you should use this in the  <code>create</code> function and store in <code>state</code>. <code>GraphicsTexture.close(): void</code> Releases the memory used by this texture. It cannot be used after that.If it was created in the <code>create</code> train function, it must be deleted in the <code>dispose</code> function, otherwise it will continue to occupy memory, thus creating a memory leak. <code>GraphicsTexture.bufferedImage: BufferedImage</code> Java AWT's BufferedImage for use as a temporary canvas. <code>GraphicsTexture.graphics: Graphics2D</code> This is the Java AWT's Graphics for this texture. You can call different functions to draw on the bufferedImage. <code>GraphicsTexture.upload(): void</code> Loads the contents of bufferedImage into video memory and immediately displays it on the model.This operation can significantly reduce FPS. It is recommended to use it in combination with <code>RateLimit</code> to reduce the frequency of texture updates.For example, the screen can be updated only 10 times per second, and it may not be updated at far distances, in some cases the information may not be updated at all. <code>GraphicsTexture.identifier: Identifier</code> The identifier of the virtual resource of this dynamic texture. You can use this to replace the model texture/draw a texture with this id."},{"location":"dev/scripting/dynamic_textures/#awt-related-classes","title":"AWT-related classes","text":"<p>You can use the importPackage function from Rhino to satisfy the java.awt dependency when using AWT classes.</p> <p>You can find some AWT tutorials on the Internet or look at the JavaDoc to see what drawing capabilities are available in Graphics2D:</p> <ul> <li>JavaDoc: Graphics (is a parent class for Graphics2D, which means everything in it can be used in GraphicsTexture.graphics as well)</li> <li>JavaDoc: Graphics2D</li> </ul> <p>The following functions can be used:</p> <ul> <li><code>static Color.decode</code>, <code>Color.WHITE\u2026</code>, <code>new Color</code></li> <li><code>Graphics.setColor</code>, <code>Graphics.setFont</code>, <code>Graphics.setStroke(new BasicStroke(\u2026))</code></li> <li><code>Graphics.drawRect</code>, <code>Graphics.fillRect</code>, <code>Graphics.drawRoundRect</code>, <code>Graphics.fillRoundRect</code></li> <li><code>Graphics.drawImage</code>, <code>Graphics.drawString</code>, <code>Font.deriveFont</code></li> <li><code>Graphics.setPaint(new GradientPaint(\u2026))</code>, <code>Graphics.fill(new Rectangle(\u2026))</code></li> <li><code>Graphics.getTransform</code>, <code>Graphics.transform</code>, <code>Graphics.setTransform</code>, <code>AffineTransform.getTranslateInstance</code>, <code>AffineTransform.getRotateInstance</code></li> <li><code>Graphics.setClip</code></li> <li><code>Graphics.getComposite</code>, <code>Graphics.setComposite(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, \u2026))</code>, <code>Graphics.setComposite</code></li> </ul>"},{"location":"dev/scripting/dynamic_textures/#referenced-sources","title":"Referenced sources","text":"<ul> <li>https://wiki.minecrafttransitrailway.com/mtr_addon:nte:js:dynamic_texture</li> </ul>"},{"location":"dev/scripting/math/","title":"Math Utilities","text":"<p>This is not an introduction to the math functions of the standard JavaScript library. Instead, this is a set of useful classes provided by NTE/JCM to perform transformations for model rendering and other things.</p>"},{"location":"dev/scripting/math/#matrices","title":"Matrices","text":"<p>When rendering, there is often a need to \u201crestore the transformation state to the previous step\u201d.</p> <p>For example, let's say I want to add a \"move down\" transformation to render the bogie. But after the rendering I need to return to the transformation before the move in order to render other parts of the car.</p> <p>Matrices implements a stack where multiple transformations can be stored. push and pop are performed in pairs.</p> Functions Description <code>new Matrices()</code> Returns Matrices. Initially there is only one unit matrix. <code>Matrices.translate(x: float, y: float, z: float): void</code> Adds a (x,y,z) translation transformation to the current state. <code>Matrices.rotateX(xRad: float): void</code> Rotates along the X axis, in radian <code>Matrices.rotateY(yRad: float): void</code> Rotates along the Y axis, in radian <code>Matrices.rotateZ(zRad: float): void</code> Rotates along the Z axis, in radian <code>Matrices.rotateXDegrees(xDeg: float): void</code> Rotates along the X axis, in degrees <code>Matrices.rotateYDegrees(yDeg: float): void</code> Rotates along the Y axis, in degrees <code>Matrices.rotateZDegrees(zDeg: float): void</code> Rotates along the Z axis, in degrees <code>Matrices.pushPose(): void</code> Places a copy of the current state on the stack. That is, a copy of the current state is saved. <code>Matrices.popPose(): void</code> Deletes the last element of the stack. That is, it resets the current state and then restores the last saved state as the last state. <code>Matrices.popPushPose(): void</code> It deletes first and then makes a copy of the saved state."},{"location":"dev/scripting/pids/","title":"PIDS Scripting","text":"<p>PIDS Scripting allows you to use JavaScript to control Scripted PIDS Preset contents.</p>"},{"location":"dev/scripting/pids/#concept","title":"Concept","text":""},{"location":"dev/scripting/pids/#drawrendering","title":"Draw/Rendering","text":"<p>JCM PIDS Scripting allows you to draw either a Text or Texture onto the Minecraft World.</p> <p>When drawn, they are just regular polygons rendered onto the Minecraft World rather than being a 2D plane with a texture. Therefore it is possible for elements to overflow beyond the PIDS screen, and it is the developer responsibility to ensure such events should not happen.</p> <p>If you absolutely require sophisticated image processing/clipping, you may follow this section to draw and manipulate a texture and draw it onto a 2D Plane. However it may result in slightly slower performance/higher memory usage.</p>"},{"location":"dev/scripting/pids/#draw-layerorder","title":"Draw Layer/Order","text":"<p>The draw order/z-index is depicted by the order the image is drawn in. Whichever elements gets drawn later, whichever element goes in-front. See the image below: (z-differences is exaggerated for demonstration purposes)</p> <p></p> <p>The number in the circle depicts the order in which the element is drawn in. 1 gets drawn first, then 2, 3, 4, 5 and finally 6.</p> <p>As such, element 6 is the frontmost element, which can cover element 1-5 if overlapped.</p>"},{"location":"dev/scripting/pids/#global-environment","title":"Global Environment","text":"<p>A script is evaluated &amp; executed when a PIDS Preset is loaded during the resource-pack loading phase.</p> <p>Therefore, the same type of PIDS Preset will use the same working environment (global variables and etc).</p> <p>Code written in top-level space outside of functions will run when a resource package is loaded, and can be used to load resources such as models and textures. It is recommended to store resources (such as models, fonts and textures) in global variables, which do not need to be different for each PIDS block, to avoid excessive memory usage caused by loading a copy of the same content for each PIDS.  </p>"},{"location":"dev/scripting/pids/#implementation","title":"Implementation","text":""},{"location":"dev/scripting/pids/#registering-a-scripted-pids-preset","title":"Registering a Scripted PIDS Preset","text":"<p>A preset is automatically considered as a Scripted PIDS Preset by specifying either <code>scriptFiles</code> or <code>scriptTexts</code> property in <code>joban_custom_resources.json</code>:</p> <pre><code>{\n  \"pids_images\": [\n    {\n      \"id\": \"pids_tut\",\n      \"name\": \"JS Tutorial Preset\",\n      \"scriptTexts\": [\"print('Goodbye World');\"],\n      \"scriptFiles\": [\"jsblock:scripts/pids_tut.js\"]\n    }\n  ]\n}\n</code></pre> <p><code>scriptFiles</code> points to the list of script file to load.</p> <p><code>scriptTexts</code> allows you to directly write JS inside, but should only be used for simple variable declaration.</p> <p>Note: At the moment, mixing Scripted PIDS Preset and JSON PIDS Preset is not possible.</p>"},{"location":"dev/scripting/pids/#called-functions","title":"Called Functions","text":"<p>Your script should include the following functions that JCM will call as needed: <pre><code>function create(ctx, state, pids) { ... }\nfunction render(ctx, state, pids) { ... }\nfunction dispose(ctx, state, pids) { ... }\n</code></pre></p> Functions Description <code>create</code> It is called when a PIDS is rendered for the first time and can be used to perform some initialization operations, for example, to create dynamic textures. <code>render</code> This function is called at-most once per frame. It is used to draw contents onto the PIDS. In practice however, the code is executed in a separate thread so as not to slow down FPS. If it takes too long to execute the code, it may be called once every few frames instead of every frame. <code>dispose</code> Called when a PIDS Block goes out of sight. Can be used for things like releasing the dynamic textures to free up memory. <p>JCM calls these functions with three parameters, each of which is described below.</p> Parameter Description First (<code>ctx</code>) Used to pass rendering actions to JCM. Type \u2014 PIDSScriptContext. Second (<code>state</code>) A JavaScript object associated with a single PIDS Block.The initial value is {}, and its content can be set arbitrarily to store what should be different for each PIDS Block. Third (<code>pids</code>) Used to get the status of pids and arrivals. Type \u2014 PIDSWrapper <p>The following lists all the rendering control operations that can be performed and all the information that can be obtained about PIDS.</p>"},{"location":"dev/scripting/pids/#api-reference","title":"API Reference","text":""},{"location":"dev/scripting/pids/#check-jcm-version","title":"Check JCM Version","text":"<p>You can obtain JCM version by using <code>Resources.getAddonVersion(\"jcm\")</code>. This would return a string formatted like: <code>2.0.0-beta.5</code></p>"},{"location":"dev/scripting/pids/#rendering-related","title":"Rendering Related","text":""},{"location":"dev/scripting/pids/#pidsscriptcontext","title":"PIDSScriptContext","text":"Functions And Objects Description <code>PIDSScriptContext.setDebugInfo(key: string, value: object)</code> Output debugging information in the upper left corner of the screen. You need to enable Debug mode in JCM Settings to display it.<code>key</code> is the name of the value<code>value</code> is the content (<code>value</code> will be converted to string for display, except for GraphicsTexture which will display the entire texture image on the screen)."},{"location":"dev/scripting/pids/#text-aka-textwrapper","title":"Text (aka TextWrapper)","text":"Functions And Objects Description <code>Text.create()</code><code>Text.create(comment: string)</code> Create a new text object <code>Text.pos(x: number, y: number): TextWrapper</code> Set the X and Y position of the element <code>Text.size(w: number, h: number): TextWrapper</code> Set the width and height of the element(Used in conjunction with <code>Text.stretchXY()</code> and <code>Text.scaleXY()</code>) <code>Text.text(str: string): TextWrapper</code> Set the text content to str <code>Text.scale(i: double): TextWrapper</code> Set the text's scale to i. Defaults to <code>1</code> <code>Text.leftAlign(): TextWrapper</code> Align the text to the left (Default) <code>Text.centerAlign(): TextWrapper</code> Align the text to the center <code>Text.rightAlign(): TextWrapper</code> Align the text to the right <code>Text.shadowed(): TextWrapper</code> Add shadow to the drawn text <code>Text.italic(): TextWrapper</code> Set the text style to Italic <code>Text.bold(): TextWrapper</code> Set the text style to Bold <code>Text.stretchXY(): TextWrapper</code> Text Overflow Mechanism:When text overflowed beyond it's size, stretch the text on the overflowing axis to fit <code>Text.scaleXY(): TextWrapper</code> Text Overflow Mechanism:When the text overflowed beyond it's size, stretch the text on both axis to fit(Keep aspect ratio) <code>Text.wrapText(): TextWrapper</code> Text Overflow Mechanism:When the text overflowed beyond it's size, split the text into the next line without any scaling. <code>Text.marquee(): TextWrapper</code> Text Overflow Mechanism:When the text overflowed beyond it's size, draw a portion of the text at a time with scrolling animation <code>Text.fontMC(): TextWrapper</code> Use vanilla Minecraft's font <code>Text.font(id: string): TextWrapper</code><code>Text.font(id: Identifier): TextWrapper</code> Set the font by it's ID. Defaults to <code>mtr:mtr</code>The font should be loaded in Minecraft via the font json format.This does not have any effect if Use Custom MTR Font is disabled in MTR mod's Config. <code>Text.color(color: number): TextWrapper</code> Set the text color, in RGB format. <code>Text.draw(ctx: PIDSScriptContext): void</code> Mark the text as something that should be rendered to the PIDS."},{"location":"dev/scripting/pids/#texture-aka-texturewrapper","title":"Texture (aka TextureWrapper)","text":"Functions And Objects Description <code>Texture.create()</code><code>Texture.create(comment: string)</code> Create a new texture object <code>Texture.pos(x: number, y: number): TextureWrapper</code> Set the X and Y position of the element <code>Texture.size(w: number, h: number): TextureWrapper</code> Set the width and height of the element <code>Texture.texture(id: string): TextureWrapper</code><code>Texture.texture(id: Identifier): TextureWrapper</code> Set the texture ID to draw.Note that the texture ID should point to a PNG file or an .mcmeta file. <code>Texture.color(color: number): TextureWrapper</code> Set the text color, in RGB format. <code>Texture.uv(u2: number, v2: number): TextureWrapper</code><code>Texture.uv(u1: number, v1: number, u2: number, v2: number): TextureWrapper</code> Set the UV coordinates <code>Texture.draw(ctx: PIDSScriptContext): void</code> Mark the texture as something that should be rendered to the PIDS."},{"location":"dev/scripting/pids/#pids-object-related","title":"PIDS Object Related","text":""},{"location":"dev/scripting/pids/#pidswrapper","title":"PIDSWrapper","text":"Functions And Objects Description <code>PIDSWrapper.type: string</code> Return the type of PIDS used, possible value are:- rv_pids- rv_pids_sil_1- rv_pids_sil_2- lcd_pids- pids_projector- pids_1a <code>PIDSWrapper.width: number</code> The full width of the available PIDS screen area. <code>PIDSWrapper.height: number</code> The full height of the available PIDS screen area. <code>PIDSWrapper.rows: number</code> The number of arrival rows supported by the PIDS Block <code>PIDSWrapper.isRowHidden(i: number): boolean</code> Returns whether the arrival for that row is hidden. (via PIDS Config) <code>PIDSWrapper.getCustomMessage(i: number): string</code> Returns the custom message configured for that row via PIDS Config.Empty string (<code>\"\"</code>) if not set. <code>PIDSWrapper.isPlatformNumberHidden(): boolean</code> Returns whether the platform number is set to hidden. (via PIDS Config) <code>PIDSWrapper.station(): Station</code> Returns the station area that this PIDS is in.<code>null</code> if not in any station. <code>PIDSWrapper.arrivals(): ArrivalsWrapper</code> Returns the arrivals obtained for the PIDS."},{"location":"dev/scripting/pids/#arrivalswrapper","title":"ArrivalsWrapper","text":"Functions And Objects Description <code>ArrivalsWrapper.get(i: number): ArrivalWrapper?</code> Returns the i<sup>th</sup> arrival entry.<code>null</code> if there's no i<sup>th</sup> arrival entry or no arrival information. <code>ArrivalsWrapper.mixedCarLength(): boolean</code> Returns whether the list of arrivals have arrival entry with different cars. <code>ArrivalsWrapper.platforms(): ObjectArrayList&lt;Platform&gt;</code> Returns the platforms that all arrival entry is stopping at."},{"location":"dev/scripting/pids/#arrivalwrapper","title":"ArrivalWrapper","text":"<p>Represent a single arrival entry.</p> Functions And Objects Description <code>ArrivalWrapper.destination(): string</code> Returns the destination name of the arrival entry.(Usually the destination's station, or a custom destination string) <code>ArrivalWrapper.arrivalTime(): number</code> Returns the epoch time (in Millisecond) the train is arriving at.Use <code>new Date(value: number)</code>to obtain a JS Date object of the arrival time. <code>ArrivalWrapper.departureTime(): number</code> Returns the epoch time (in Millisecond) the train is departing at.Use <code>new Date(value: number)</code>to obtain a JS Date object of the departure time. <code>ArrivalWrapper.deviation(): number</code> Returns the deviation[?] <code>ArrivalWrapper.realtime(): boolean</code> Returns whether the arrival entry is scheduled (i.e. Train not departed), or a real-time estimation (i.e. Train running) <code>ArrivalWrapper.departureIndex(): number</code> Returns the departure index[?] <code>ArrivalWrapper.terminating(): boolean</code> Returns whether the arrival entry is terminating its service at the current platform. <code>ArrivalWrapper.route(): Route</code> Returns the route object of the route that the train is running on.Might be null if the route cannot be found (e.g. Deleted) <code>ArrivalWrapper.routeId(): number</code> Returns the id of the route that the train is running on. <code>ArrivalWrapper.routeName(): string</code> Returns the name of the route that the train is running on. <code>ArrivalWrapper.routeNumber(): string</code> Returns the route number string (Previously called LRT Route Number), empty string if route number is not set. <code>ArrivalWrapper.routeColor(): number</code> Returns the color of the route that the train is running on. <code>ArrivalWrapper.circularState(): Route.CircularState</code> Returns the circular state of the route that the train is running on. <code>ArrivalWrapper.platform(): Platform</code> Returns the platform object that the train is approaching towards. <code>ArrivalWrapper.platformId(): number</code> Returns the id of the platform that the train is approaching towards. <code>ArrivalWrapper.platformName(): string</code> Returns the name of the platform that the train is approaching towards. <code>ArrivalWrapper.carCount(): number</code> The car length of the train in that arrival entry. <code>ArrivalWrapper.cars(): List&lt;CarDetails&gt;</code> Returns a List containing CarDetails for each car."},{"location":"dev/scripting/pids/#transport-simulation-core-related","title":"Transport Simulation Core Related","text":"<p>Transport Simulation Core (TSC) is the backend serving MTR 4. Below are some of the classes in TSC, which may be returned by JCM above.</p>"},{"location":"dev/scripting/pids/#platform","title":"Platform","text":"Functions And Objects Description <code>Platform.routes: ObjectAVLTreeSet&lt;Route&gt;</code> A list of routes that goes through this platform. <code>Platform.routeColors: IntAVLTreeSet</code> All colors of route that goes through this platform. <code>Platform.getName(): string</code> Returns the platform name. <code>Platform.getId(): number</code> Returns the platform ID. <code>Platform.getDwellTime(): number</code> The dwell time duration of the platform in millisecond."},{"location":"dev/scripting/pids/#route","title":"Route","text":"Functions And Objects Description <code>Route.depots: ObjectArrayList&lt;Depot&gt;</code> A list of depot associated with this route[?] <code>Route.getName(): string</code> Returns the platform name. <code>Route.getId(): number</code> Returns the route ID. <code>Route.getColor(): number</code> Returns the color of the route. <code>Route.getHidden(): boolean</code> Returns whether the route is hidden. <code>Route.getDestination(index: number): string</code> Returns name of index of the following order:- Custom Destination- Station Area Name- Platform Name <code>Route.getRouteType(): RouteType</code> Returns the type of route:- NORMAL- LIGHT_RAIL- HIGH_SPEED"},{"location":"dev/scripting/pids/#cardetails","title":"CarDetails","text":"Functions And Objects Description <code>CarDetails.getVehicleId(): string</code> Returns the id of the vehicle car (As defined in Resource Packs) <code>CarDetails.getOccupancy(): number</code> Returns the occupancy level. Only returns 0 at the moment."},{"location":"dev/scripting/pids/#using-awt-graphicsdynamic-textures","title":"Using AWT Graphics/Dynamic Textures","text":"<p>While not a regular tested use case for PIDS, you can create a Dynamic Textures and draw it onto a PIDS:</p> <pre><code>importPackage(java.awt);\n\nfunction create(ctx, state, pids) {\n    state.tex = new GraphicsTexture(pids.width, pids.height);\n}\n\nfunction render(ctx, state, pids) {\n    let g = state.tex.graphics;\n    g.setColor(Color.RED);\n    g.fillRect(0, 0, pids.width, pids.height);\n    g.setColor(Color.GREEN);\n    g.fillRect(0, 0, Math.abs(Math.sin(Timing.elapsed())) * pids.width, pids.height);\n\n    state.tex.upload();\n\n    Texture.create(\"Dynamic Texture\")\n    .texture(state.tex.identifier)\n    .size(pids.width, pids.height)\n    .draw(ctx);\n}\n\nfunction dispose(ctx, state, pids) {\n    state.tex.close();\n}\n</code></pre>"},{"location":"dev/scripting/resources/","title":"Resource Loading Method","text":"<p>NTE/JCM provides several methods for controlling the loading and retrieval of resources within resource packs in JavaScript scripts.</p> <p>Code written in the top-level space outside of functions will be executed when a resource pack is loaded and can be used to initialize resources such as models, textures, etc. Resources that should not be different for each train (such as models and such) are recommended to be stored in global variables to avoid excessive memory usage when loading a copy of the same content for each train.</p>"},{"location":"dev/scripting/resources/#resourcelocation","title":"ResourceLocation","text":"<p>Minecraft uses a ResourceLocation to identify files in a resource pack, thus many functions only accept <code>ResourceLocation</code> rather than strings. To create an <code>ResourceLocation</code>, you can use the following functions:</p> Functions Description <code>static Resources.id(idStr: string): ResourceLocation</code> Create an ResourceLocation based on the stringe.g. <code>Resources.id(\u201cmtr:path/absolute.js\u201d)</code>. <code>static Resources.idr(relPath: string): ResourceLocation</code> Create an ResourceLocation based on the relative directory the currently executed script are located ine.g. <code>Resources.idr(\u201crelative.js\u201d)</code>."},{"location":"dev/scripting/resources/#model-loading","title":"Model Loading","text":"<p>Info</p> <p>Please note that the current API is much more high level and does not offer fine-grained control like in MTR 3/NTE.</p> Functions Description <code>static ModelManager.loadModel(id: ResourceLocation, flipV: boolean): ScriptedModel</code> Load an OBJ/bbmodel model from a path and upload to the GPU.Set <code>flipV</code> to true if your texture is rendered incorrectly."},{"location":"dev/scripting/resources/#loading-awt-resources","title":"Loading AWT Resources","text":"<p>These functions load the resources used to draw dynamic textures via the Java AWT.</p> Functions Description <code>static Resources.getSystemFont(name: string): Font</code> Get a system or MTR built-in font, one of the following:- Noto Serif: MTR's built-in serif font (similar to Song), identical on all systems.- Noto Sans: NTE Built-in sans serif font (similar to Helvetica). Identical on all systems. [Not available in JCM for now]- Serif: A serif font selected by AWT that is installed on this computer. May be different on different devices.- SansSerif: A sans serif font selected by AWT that is installed on this computer. May be different on different devices.- Monospaced: A monospaced font selected by AWT that is installed on this computer. May be different on different devices. <code>static Resources.readFont(path: ResourceLocation): Font</code> Load a custom TTF or OTF font file as an AWT Font. Note: Due to the way Java and Minecraft Resource Pack works, new temporary font files are generated on your disk every time you call this function.If you find yourself running out of disk space during the development, you can free up disk space by deleting files starting with <code>+~JF</code> on your system temp directory, or restart your Minecraft/Computer. <code>static Resources.readBufferedImage(path: ResourceLocation): BufferedImage</code> Loads an image file as an AWT BufferedImage. <code>static Resources.getFontRenderContext(): FontRenderContext</code> Get an AWT FontRenderContext."},{"location":"dev/scripting/resources/#reading-resource-files","title":"Reading resource files","text":"Functions Description <code>static Resources.readString(location: ResourceLocation): string?</code> Reads the contents of a resource file as a string. Returns null if reading fails."},{"location":"dev/scripting/utilities/","title":"Utilities Method","text":"<p>As the scripting functionality is based on the Nemo Transit Expansion addon, a number of helper classes are inherited from NTE to provide information or to simplify code implementation.</p>"},{"location":"dev/scripting/utilities/#printing-debug-information","title":"Printing debug information","text":"<p><code>static print(params: Object...): void</code></p> <p>This function outputs a message to the Minecraft log (''the message is not displayed in the game''). Any number of arguments of any type can be passed to the function.</p>"},{"location":"dev/scripting/utilities/#versions","title":"Versions","text":"<p>Functions are provided where you can get the version number to ensure compatibility with different versions of mods (if any).</p> Functions Description <code>static Resources.getAddonVersion(modId: string): string</code> Obtain the version of a mod that is hooked to the scripting functionality.Out of the box in JCM, the possible value of <code>modId</code> are:- mtr- jcm"},{"location":"dev/scripting/utilities/#textutil","title":"TextUtil","text":"<p>The MTR mod uses the station naming format <code>Name in one language|Name in another language||EXTRA</code>, so TextUtil is implemented to provide functions to separate these parts.</p> Functions Description <code>static TextUtil.cycleString(src: String): String</code> Returns a text that cycles different languages. (Delimited by the pipe <code>|</code> character) <code>static TextUtil.cycleString(src: String, duration: int): String</code> Returns a text that cycles different languages. (Delimited by the pipe <code>|</code> character)The cycle frequency is decided by the <code>duration</code> parameter, in Minecraft Tick. <code>static TextUtil.getCjkParts(src: String): String</code> Returns the CJK parts of the passed string. <code>static TextUtil.getNonCjkParts(src: String): String</code> Returns the non-CJK parts of the passed string. <code>static TextUtil.getExtraParts(src: String): String</code> Returns the extra part of the passed string. <code>static TextUtil.getNonExtraParts(src: String): String</code> Returns everything except the extra part. <code>static TextUtil.getNonCjkAndExtraParts(src: String): String</code> Returns everything except the CJK parts. <code>static TextUtil.isCjk(src: String): boolean</code> Checks whether the string contains CJK characters."},{"location":"dev/scripting/utilities/#timing","title":"Timing","text":"Functions Description <code>static Timing.elapsed(): double</code> Returns the running time of the game in seconds. It is constantly increasing, even when the game is paused. <code>static Timing.delta(): double</code> The time difference between the current <code>render</code> call and the previous one.This can be used, for example, to calculate the angle by which the wheel have turned during the elapsed time. <code>static Timing.currentTimeMillis(): long</code> Returns the current time in millisecond (Since 1970/1/1).This is the same as Java's System.currentTimeMillis() <code>static Timing.nanoTime(): long</code> This is the same as Java's System.nanoTime()"},{"location":"dev/scripting/utilities/#statetracker","title":"StateTracker","text":"<p>Sometimes it is necessary to take transition states into account. For example, to play an animation only once when a certain condition is reached (because <code>if (\u2026distance &lt; 300) ctx.play\u2026</code> would be satisfied every frame after the condition was met, and then play every frame after that, which would result in hundreds of animations), or to play an animation in the first second after a page switch.</p> <p>Since each object should have its own tracker, you would probably want to store it in the script's <code>state</code> variable.</p> Functions Description <code>new StateTracker()</code> Creates StateTracker. <code>StateTracker.setState(value: string): void</code> Sets the new state. <code>StateTracker.stateNow(): string</code> Returns the current state. <code>StateTracker.stateLast(): string?</code> Returns the previous state. If it does not exist, <code>null</code> is returned. <code>StateTracker.stateNowDuration(): double</code> Returns the amount of time the current state lasts. <code>StateTracker.stateNowFirst(): boolean</code> Was the state just changed by the <code>setState</code> function in this loop or not?"},{"location":"dev/scripting/utilities/#cycletracker","title":"CycleTracker","text":"<p>This is a <code>StateTracker</code> that automatically switches on a cyclic basis by time.</p> <p>Since each object should have its own tracker, you would probably want to store it in the script's <code>state</code> variable.</p> Functions Description <code>new CycleTracker(params: Object[])</code> Creates a CycleTracker.The parameters are the states it will switch through and the duration of each state in seconds.Example: <code>new CycleTracker([\u201croute\u201d, 5, \u201cnextStation\u201d, 5])</code>. <code>CycleTracker.tick(): void</code> Updates the status based on the current time. <code>CycleTracker.stateNow(): string</code> Returns the current state. <code>CycleTracker.stateLast(): string?</code> Returns the previous state. If it does not exist, <code>null</code> is returned. <code>CycleTracker.stateNowDuration(): double</code> Returns the amount of time the current state lasts. <code>CycleTracker.stateNowFirst(): boolean</code> Was the state just changed by the <code>setState</code> function in this loop or not?"},{"location":"dev/scripting/utilities/#ratelimit","title":"RateLimit","text":"<p>Some tasks do not require too frequent execution, for example, the display may not be updated every frame, but only 10 times per second. Therefore, you can limit the frequency of their execution to improve performance.</p> <p>Since each object should have its own tracker, you would probably want to store it in the script's <code>state</code> variable.</p> Functions Description <code>new RateLimit(params: Object[])</code> Creates a RateLimit.<code>interval</code> is the interval in seconds between two triggers.For example, an interval of 0.1 means it should occur ten times per second. <code>RateLimit.shouldUpdate(): boolean</code> Has enough time elapsed between the last triggers?Wrap the necessary code using<code>if (state.rateLimitXXX.shouldUpdate()) { \u2026 }</code>to limit its execution frequency. <code>RateLimit.resetCoolDown(): void</code> Resets the timer to go off as soon as possible."},{"location":"dev/scripting/utilities/#mtrclientdata","title":"MTRClientData","text":"<p>Client data from MTR that can be used to read routes, transfers, etc. See the source code of MinecraftClientData.java from MTR.</p>"},{"location":"dev/scripting/utilities/#minecraftclient","title":"MinecraftClient","text":"<p>Due to obfuscation, there is no way to directly provide a client class for use. Therefore, several helper methods are created:</p> Functions Description <code>static MinecraftClient.worldIsRaining(): boolean</code> Is it raining in the world? <code>static MinecraftClient.worldIsThundering(): boolean</code> Is it thundering in the world? <code>static MinecraftClient.worldIsRainingAt(pos: Vector3f): boolean</code> Is it raining and getting wet in a given chunk? <code>static MinecraftClient.worldDayTime(): int</code> Returns the in-game world time in ticks. <code>static MinecraftClient.narrate(message: string): void</code> This calls the Minecraft narrator to narrate the message. <code>static MinecraftClient.displayMessage(message: String, actionBar: boolean): void</code> This displays the message as an in-game chat message. If action bar is true, it will display on the action bar instead. (Above inventory hotbar)"},{"location":"dev/scripting/utilities/#networking","title":"Networking","text":"<p>The <code>Networking</code> class allows scripts to send HTTP requests to fetch plain text content/images over the internet.</p> <p>Calling any function within this class will return a NetworkResponse, which is described below.</p> <p>If the HTTP request fails, an error will be thrown. Consider using <code>try/catch</code> block to handle script errors. (This behaviour may change in the future!)</p> Functions Description <code>static Networking.fetchString(url: string): NetworkResponse&lt;String&gt;</code> Fetch plain text content from the corresponding URL <code>static Networking.fetchString(url: string, requestOption: RequestOption): NetworkResponse&lt;String&gt;</code> Fetch plain text content from the corresponding URL, with the request option applied. (See below for RequestOption) <code>static Networking.fetchImage(url: string): NetworkResponse&lt;BufferedImage&gt;</code> Fetch image from the corresponding URL <code>static Networking.fetchImage(url: string, requestOption: RequestOption): NetworkResponse&lt;BufferedImage&gt;</code> Fetch image from the corresponding URL, with the request option applied. (See below for RequestOption)"},{"location":"dev/scripting/utilities/#requestoption","title":"RequestOption","text":"<p>This is a JavaScript Object that specifies connection-related details.</p> Field Name Type Description <code>method</code> string The HTTP method used. Default to <code>GET</code> <code>connectionTimeout</code> number Specify the max timeout in millisecond when sending the HTTP request. <code>readTimeout</code> number Specify the max timeout in millisecond when retrieving data from an HTTP request. <code>headers</code> object A JavaScript object which contains the HTTP header to apply when sending the request. <code>body</code> string The request body to send. This is typically used for HTTP <code>POST</code> request.Note: The Content-Length header will be automatically set if this field is supplied."},{"location":"dev/scripting/utilities/#networkresponse","title":"NetworkResponse","text":"Functions Description <code>NetworkResponse.getResponseCode(): int</code> Get the HTTP Response Code, a list can be found here. <code>NetworkResponse.getData(): ?</code> Obtain the fetched data. This could be either a string, or an AWT BufferedImage depending on what function you invoke in HttpUtil. <code>NetworkResponse.getHeaders(): Map&lt;String, List&lt;String&gt;&gt;</code> Obtain the headers in the HTTP response"},{"location":"dev/scripting/utilities/#example","title":"Example","text":"<pre><code>/* GET request */\nlet dataResponse = HttpUtil.fetchString(\"https://api.modrinth.com/v2/project/minecraft-transit-railway\");\n\nif(dataResponse.getResponseCode() == 200) {\n    let mtrProjectStr = dataResponse.getData();\n    let mtrProject = JSON.parse(mtrProjectStr);\n    print(`The MTR mod is last updated on ${mtrProject.updated}`);\n}\n\n/* POST request */\nlet dataResponse = Networking.fetchString(\"https://localhost:7171\", {\n    method: \"POST\",\n    connectTimeout: 1000, // in millisecond\n    readTimeout: 1000, // in millisecond\n    headers: {\n        Accept: \"application/json\"\n    },\n    body: JSON.stringify(\n        {\n            key: \"value\"\n        }\n   )\n});\n\n/* GET request (image) */\nlet onlineImageResp = Networking.fetchImage(\"https://wiki.minecrafttransitrailway.com/_media/wiki:logo.png\");\nlet onlineImage = onlineImageResp.getData();\n\n... (AWT code)\ng.drawImage(onlineImage, 0, 0, null);\n</code></pre>"},{"location":"dev/scripting/utilities/#further-note","title":"Further Note","text":"<p>Currently the User-Agent header is always overriden to <code>Joban Client Mod (https://joban.org/jcm)</code>.</p>"},{"location":"dev/scripting/utilities/#files","title":"Files","text":"<p>The Files class allows saving/reading files with scripts to a limited degree. It is intended for scripts to use it as a config file as well as storing persistent/cache data. This is usually only useful for scripts requiring advanced functionalities.</p>"},{"location":"dev/scripting/utilities/#scope","title":"Scope","text":"<ul> <li>Scripts can perform Read/Write/Delete operation under the .minecraft/data/mtrscripting directory. This directory is reserved for scripts to store data.</li> <li>Scripts can perform Read operation under .minecraft. This is intended to migrate existing scripts to MTR 4, which previously contains file residing on another directory. (And also to detect and provide mod compatibility for really advanced scripts)</li> <li>Scripts are not allowed to access anything outside the .minecraft directory.</li> </ul> Functions Description <code>static Files.read(path: string...): string</code> Read a file based on the specified path and returns the content in string (null if the file don't exist).This function always resolves relatively starting from '''.minecraft'''. <code>static Files.readData(path: string...): string</code> Read a file based on the specified path and returns the content in string (null if the file don't exist).Note: It is strongly recommended to store your file in a sub-directory with a unique name to avoid collisionThis function always resolves relatively starting from .minecraft/data/mtrscripting. <code>static Files.saveData(content: string, path: string...): void</code> Create a file with the specified content in the specified path. The filename should be included in the path already.All parent directory in the path will be automatically generated if it doesn't exists.This function always resolves relatively starting from '''.minecraft/data/mtrscripting'''. <code>static Files.deleteData(path: string...): void</code> Delete the file from the specified path.This function always resolves relatively starting from '''.minecraft/data/mtrscripting'''. <code>static Files.hasData(path: string...): boolean</code> Returns whether the specified file/directory exists.This function always resolves relatively starting from '''.minecraft/data/mtrscripting'''."},{"location":"dev/scripting/utilities/#example_1","title":"Example","text":"<pre><code>// Notice that we don't use forward slash (/) or backslash (\\) to specify path, but instead pass them onto multiple arguments (e.g. (\"config\", \"mtr.json\") instead of (\"config/mtr.json\")\nlet mtrConfigStr = Files.read(\"config\", \"mtr.json\");\nlet mtrConfig = JSON.parse(mtrConfigStr);\nlet mtrChatAnnouncementEnabled = mtrConfig.chatAnnouncements;\n\nlet nonExistentFile = Files.read(\"1234567890\");\nprint(nonExistentFile); // null\n\n/* Data reading */\nlet haveCompanyName = Files.hasData(\"tut_script\", \"company_name.txt\");\nlet companyName = haveCompanyName ? \"Unnamed Company\" : Files.readData(\"tut_script\", \"company_name.txt\"); // Of course this is an extreme example. Since readData returns null if non-existent anyway, you can just check whether it's null instead of calling hasData separately.\n\n/* Data Saving */\nFiles.saveData(\"grass_has_been_touched\", \"tut_script\", \"stage.txt\");\n</code></pre>"},{"location":"dev/scripting/vehicle/","title":"Vehicle Scripting","text":"<p>Vehicle Scripting allows you to use JavaScript to control train rendering.</p> <p>While JCM supports vehicle scripting, it is nowhere near a state for something useful to be made(1), and thus no implementation documentation is provided at the moment.</p> <ol> <li>MTR 4 does not expose low-level model operation (Such as dynamically replacing the texture after uploading the model), therefore stuff like per-vehicle LCD screen is not quite possible.</li> </ol>"},{"location":"dev/scripting/vehicle/#concept","title":"Concept","text":"<p>In MTR 4, there is no longer a concept of a train. Instead, we have vehicle, which is a single vehicle consist. A train in a siding is made up of multiple consists linked together, just like how it is in real-life.</p> <p>Therefore, the vehicle scripting system revolves around a single consist instead of the whole train. If you have an 8-car train of the same type with scripting enabled, your script would be invoked 8 times during rendering.</p>"},{"location":"nerds/neojcm/","title":"NeoJCM","text":"<p>NeoJCM is a derived version of Joban Client Mod v2 that is designed to target NeoMTR, a derived version of MTR 3.0.</p> <p>The GitHub repository can be found at https://github.com/Kenny-Hui/NeoJCM.</p> <p>Support for using this version is limited, and there is no guarentee on when a new version will release/when will a bug be fixed. It is also not widely tested, as such you should exercise regular risk management such as backing up your world regularly shall you wish to use this.</p> <p>While not the initial goal, the source code also serves as a pointer to a port of JCM to MTR 4.1, where the Minecraft-Mappings framework will no longer be used.</p>"},{"location":"nerds/neojcm/#screenshots","title":"Screenshots","text":""},{"location":"players/","title":"Welcome to Joban Client Mod!","text":"<p>Joban Client Mod (Abbreviated as JCM) is an addon of the Minecraft Transit Railway mod, adding various railway facilities blocks seen in the Hong Kong MTR Network, as well as other blocks which may be helpful to your building.</p> <p></p>"},{"location":"players/#download-and-install","title":"Download and install","text":"<p>See  Download &amp; Install</p>"},{"location":"players/#blocks","title":"Blocks","text":"<p>See  Blocks for details of all the blocks in JCM.</p>"},{"location":"players/#historic-releases","title":"Historic Releases","text":"<p>See  Version Archive to check the changelog &amp; download historic releases of Joban Client Mod.</p>"},{"location":"players/#faq","title":"FAQ","text":"Will you upload this mod to CurseForge? <p>No plan at the moment, sorry. It's easier to work with a single platform, and Modrinth's API is much more open.</p> Can I port your mod to XX modloader / XX versions? <p>Joban Client Mod is licensed under the MIT License, you can do whatever you want as long as you comply with the license!</p> Can I include your mod in my modpack? <p>Yes!</p>"},{"location":"players/download/","title":"Download &amp; Install","text":""},{"location":"players/download/#version-differences","title":"Version Differences","text":"<p>Before installing, it is important to know that Joban Client Mod have 3 variants:</p>"},{"location":"players/download/#v1-unsupported","title":"v1 Unsupported","text":"<p>This is the original Joban Client Mod, designed for Minecraft Transit Railway 3 (MTR 3)</p> <ul> <li>Available for Minecraft Fabric/Forge 1.16.5 - 1.20.1</li> </ul>"},{"location":"players/download/#v2-supported","title":"v2 Supported","text":"<p>This is a rewritten version of Joban Client Mod, designed for Minecraft Transit Railway 4 (MTR 4)</p> <ul> <li>Supports Minecraft Fabric/Forge 1.16.5 - 1.20.4</li> </ul>"},{"location":"players/download/#neo-semi-supported","title":"neo Semi-supported","text":"<p>This is a variant of Joban Client Mod v2 that targets NeoMTR, a derived version of MTR 3.</p> <ul> <li>Available for Minecraft Fabric/NeoForge 1.21.1</li> </ul> <p>Currently we only support and continue releasing new versions for v2, and therefore only MTR 4 is supported. If you are new to the MTR mod/JCM, you are advised to start from MTR 4 and JCM v2.</p>"},{"location":"players/download/#before-installing","title":"Before Installing","text":"<p>Joban Client Mod requires other mods to function, please install such mods first before installing JCM.</p> For Fabric usersFor Forge users <ul> <li>Fabric API</li> <li>Minecraft Transit Railway 4.x</li> </ul> <ul> <li>Minecraft Transit Railway 4.x</li> </ul>"},{"location":"players/download/#download","title":"Download","text":"<p> Download on Modrinth!</p> <p>Alternatively if you are unable to download this mod from Modrinth, you may also download from:</p> <ul> <li>Version Archive </li> <li> GitHub (For JCM v2 only!)</li> </ul>"},{"location":"players/blocks/","title":"Blocks","text":"<p>Below you will find a list of all blocks provided by the Joban Client Mod. You may view the detail of each of them by clicking on the text.</p>"},{"location":"players/blocks/auto_iron_door/","title":"Automatic Iron Door","text":"<p>An Automatic Iron Door is a copy of Minecraft's Iron Door that will automatically open when player gets in a 3 block range with the door.</p> <p>All block states and properties follows Minecraft Iron Door.</p>"},{"location":"players/blocks/auto_iron_door/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/auto_iron_door/#history","title":"History","text":"Version Changes Made v1.0.4 Added Automatic Iron Door v1.1.2 The frequency which the door checks for players has been increased from every 15 ticks to 5 ticks."},{"location":"players/blocks/buffer_stop/","title":"Buffer Stop","text":"<p>A Buffer Stop is a decorative block in Joban Client Mod that mimicks the Buffer Stop seen in East Rail Line. This device is used to prevent trains from overrunning in the real world.</p>"},{"location":"players/blocks/buffer_stop/#usage","title":"Usage","text":"<p>Place the block at least 2 blocks in front of the final rail node.</p>"},{"location":"players/blocks/buffer_stop/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/buffer_stop/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/buffer_stop/#history","title":"History","text":"Version Changes Made v1.0.5 Added Buffer Stop v1.1.3 Buffer Stop now uses animated textures v2.0.0 Rename <code>jsblock:bufferstop_1</code> to <code>jsblock:buffer_stop</code>"},{"location":"players/blocks/butterfly_light/","title":"Door Closing Indicator (Butterfly Light)","text":"<p>A Door Closing Indicator (Also known as Butterfly Light) is a block in Joban Client Mod that replicates a device in the MTR East Rail Line which reminds the train driver to close the train door and depart.</p>"},{"location":"players/blocks/butterfly_light/#usage","title":"Usage","text":"<ol> <li>Place the block near a platform. (A configuration replicating real-life would be to place it at the end of the platform rail node)</li> <li>Some time before the train departs, the light will start flashing. (Default to 10 seconds, configurable).</li> </ol>"},{"location":"players/blocks/butterfly_light/#configuring","title":"Configuring","text":"<p>You may configure the time when it starts flashing before departure by right clicking with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/butterfly_light/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/butterfly_light/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/butterfly_light/#block-entity","title":"Block entity","text":"<p>This block has a block entity, and stores the following data:</p> Name Type Description Default Value seconds_to_blink Integer The dwell time (seconds) left when it starts blinking 10"},{"location":"players/blocks/butterfly_light/#history","title":"History","text":"Version Changes Made v1.0.0 Added Butterfly Light. v1.0.3 Butterfly Light now works properly without doDaylightCycle on. v1.1.4 The flashing state has been changed to an animated texture. v1.1.6 The time until it blinks can now be configured. v2.0.0 Removed LIT state and light level to 0, butterfly light are now fully rendered client-side."},{"location":"players/blocks/ceiling_45/","title":"Ceiling (45\u00b0)","text":"<p>A Ceiling (Slanted) is a decorative block in Joban Client Mod.</p>"},{"location":"players/blocks/ceiling_45/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/ceiling_45/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/ceiling_45/#history","title":"History","text":"Version Changes Made v1.0.0 Added Ceiling v1.1.4 Visual Hitbox is now larger to ease building v2.0.0 Rename <code>jsblock:ceiling_1</code> to <code>jsblock:ceiling_slanted</code>"},{"location":"players/blocks/circle_walls/","title":"Circle Walls","text":"<p>Circle Walls is a series of blocks in Joban Client Mod that are meant to be used for tunnels.</p> <p>A total of 7 parts are available for selection in the inventory.</p>"},{"location":"players/blocks/circle_walls/#usage","title":"Usage","text":"<p>Follow the placement in the image.</p>"},{"location":"players/blocks/circle_walls/#placement-automation","title":"Placement automation","text":"<p>For Circle Wall (1, 2, 3, 4, 5), you may place the following piece (2, 3, 4, 5, 6) on top of them, and JCM will automatically try to shift the block placement to form a circular tunnel.</p>"},{"location":"players/blocks/circle_walls/#alternative","title":"Alternative","text":"<p>A rail model of the tunnel wall is available which works against curve, check here for usage.</p>"},{"location":"players/blocks/circle_walls/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/circle_walls/#circle-wall-1","title":"Circle Wall (1)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-2","title":"Circle Wall (2)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-3","title":"Circle Wall (3)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-4","title":"Circle Wall (4)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-5","title":"Circle Wall (5)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-6","title":"Circle Wall (6)","text":""},{"location":"players/blocks/circle_walls/#circle-wall-7","title":"Circle Wall (7)","text":""},{"location":"players/blocks/circle_walls/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/circle_walls/#history","title":"History","text":"Version Changes Made v1.0.0 Added Circle Wall v1.1.5 Brightened the texture, auto-place circle wall when placing on top of the block."},{"location":"players/blocks/departure_pole/","title":"Departure Pole","text":"<p>A Departure Pole is a block in Joban Client Mod, used in conjunction with Butterfly Light and Departure Timer.</p>"},{"location":"players/blocks/departure_pole/#usage","title":"Usage","text":"<p>Placing the pole would result in it aligning to the edge of the block facing towards you. Then, you can place both the Butterfly Light and Departure Timer in front of the pole, with the pole acting as a support.</p>"},{"location":"players/blocks/departure_pole/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/departure_pole/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/departure_pole/#history","title":"History","text":"Version Changes Made v1.0.0 Added Departure Pole"},{"location":"players/blocks/departure_timer/","title":"Departure Timer","text":"<p>A Departure Timer is a block that displays the remaining time until the train departs, it is modelled after the departure timer seen in the MTR East Rail Line.</p>"},{"location":"players/blocks/departure_timer/#usage","title":"Usage","text":"<ol> <li>Place the block near a platform. (A configuration replicating real-life would be to place it at the end of the platform rail node)</li> <li>After the train arrives, the block will start showing the time remaining until the train's departure.</li> </ol>"},{"location":"players/blocks/departure_timer/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/departure_timer/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/departure_timer/#block-entity","title":"Block entity","text":"<p>This block has a block entity, but does not store any persistent data.</p>"},{"location":"players/blocks/departure_timer/#history","title":"History","text":"Version Changes Made v1.0.0 Added Departure Timer v1.1.5 Departure Timer now extends Font Base, font can now be customized by manually changing the block entity data v2.0.0 Removed the (hidden) ability to configure font"},{"location":"players/blocks/drl_apgs/","title":"Disneyland Resorts Line APG","text":"<p>An APG (Disneyland Resorts Line Variants) is a series of blocks in Joban Client Mod that replicates the Automatic Platform Gates (APG) used in the MTR Disneyland Resorts Line.</p> <p>They are slightly lower than the APG seen in other MTR Routes.</p>"},{"location":"players/blocks/drl_apgs/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/drl_apgs/#drl-apg-door","title":"DRL APG Door","text":""},{"location":"players/blocks/drl_apgs/#drl-apg-glass","title":"DRL APG Glass","text":""},{"location":"players/blocks/drl_apgs/#drl-apg-glass-end","title":"DRL APG Glass End","text":""},{"location":"players/blocks/drl_apgs/#block-states","title":"Block states","text":""},{"location":"players/blocks/drl_apgs/#drl-apg-door_1","title":"DRL APG Door","text":"facing half side unlocked end north lower single true true east upper left false false south right west middle"},{"location":"players/blocks/drl_apgs/#drl-apg-glass_1","title":"DRL APG Glass","text":"facing half side propagate_property north lower single 0 east upper left 1 south right 2 west middle 3"},{"location":"players/blocks/drl_apgs/#drl-apg-glass-end_1","title":"DRL APG Glass End","text":"facing half side touching_left touching_right north lower single air air east upper left door door south right none none west middle"},{"location":"players/blocks/drl_apgs/#block-entity","title":"Block entity","text":"<p>The DRL APG Door has a block entity, but does not store any persistent data.</p>"},{"location":"players/blocks/drl_apgs/#history","title":"History","text":"Version Changes Made v1.1.6 Added APG (Disneyland Resort Line Variants)"},{"location":"players/blocks/exit_signs/","title":"Exit Signs","text":"<p>Exit Sign (Odd) and Exit Sign (Even)  is a decorative block in Joban Client Mod, replicating an emergency exit sign seen in Hong Kong.</p> <p>It is designed to be hanging/attached to the bottom of a block.</p>"},{"location":"players/blocks/exit_signs/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/exit_signs/#exit-sign-odd","title":"Exit Sign (Odd)","text":""},{"location":"players/blocks/exit_signs/#exit-sign-even","title":"Exit Sign (Even)","text":""},{"location":"players/blocks/exit_signs/#block-states","title":"Block states","text":""},{"location":"players/blocks/exit_signs/#exit-sign-odd_1","title":"Exit Sign (Odd)","text":"facing north east south west"},{"location":"players/blocks/exit_signs/#exit-sign-even_1","title":"Exit Sign (Even)","text":"facing left north true east false south west"},{"location":"players/blocks/exit_signs/#history","title":"History","text":"Version Changes Added v1.0.1 Added Exit Signs v1.0.8 Added Exit Signs (Even) v1.1.5 Light Level changed from 10 -&gt; 5 v2.0.0 Rename <code>jsblock:exit_sign_1</code> to <code>jsblock:exit_sign_odd</code>Rename <code>jsblock:exit_sign_1e</code> to <code>jsblock:exit_sign_even</code>"},{"location":"players/blocks/fare_saver/","title":"Fare Saver","text":"<p>A Fare Saver is a block in Joban Client Mod, replicating an older variants of a MTR Fare Saver machine.</p>"},{"location":"players/blocks/fare_saver/#usage","title":"Usage","text":"<ol> <li>Right click the machine</li> <li>Next time you exit the station, you fare will be deducted by the amount as indicated on the machine.</li> </ol>"},{"location":"players/blocks/fare_saver/#configuration","title":"Configuration","text":"<p>The fare save amount and the displayed currency unit can be configured by right clicking with an MTR brush item.</p>"},{"location":"players/blocks/fare_saver/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/fare_saver/#block-states","title":"Block states","text":"facing third north lower east middle south upper west"},{"location":"players/blocks/fare_saver/#block-entity","title":"Block entity","text":"<p>This block has a block entity, the data is as follows:</p> Name Type Description Default Value prefix String The currency unit displayed $ discount Integer The discount to apply (in MTR balance) 2"},{"location":"players/blocks/fare_saver/#history","title":"History","text":"Version Changes Made v1.1.4 Added Fare Saver v1.1.5 Improvement to Fare Saver Model v2.0.0 Rename <code>jsblock:fare_saver_1</code> to <code>jsblock:fare_saver</code>"},{"location":"players/blocks/fire_alarm/","title":"Fire Alarm","text":"<p>A Fire alarm is a wall-attached block, replicating the fire alarm initiating devices seen in Hong Kong.</p>"},{"location":"players/blocks/fire_alarm/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/fire_alarm/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/fire_alarm/#block-states","title":"Block states","text":"facing unpowered north true east false south west"},{"location":"players/blocks/fire_alarm/#history","title":"History","text":"Version Changes Made v2.0.0 Added Fire Alarm Block"},{"location":"players/blocks/helpline_1/","title":"Help Line (With Sticker)","text":"<p>A Help Line (With Sticker) is a wall-attached block in Joban Client Mod, acting as a machine to request assistance from station staff.</p>"},{"location":"players/blocks/helpline_1/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/helpline_1/#crafting-recipe","title":"Crafting Recipe","text":"<p>Note</p> <p>The blue dye in this crafting grid refers to any dye</p>"},{"location":"players/blocks/helpline_1/#block-states","title":"Block states","text":"facing unpowered north true east false south west"},{"location":"players/blocks/helpline_1/#trivia","title":"Trivia","text":"<p>This block is the first ever block added into JCM, and is released along with other block in v1.0.0.</p>"},{"location":"players/blocks/helpline_1/#history","title":"History","text":"Version Changes Made v1.0.0 Added Helpline v1.1.5 Hardness changed from 2.0 -&gt; 1.0 v2.0.0 Right clicking now emits a redstone signal"},{"location":"players/blocks/helpline_2/","title":"Help Line","text":"<p>A Help Line is a wall-attached block in Joban Client Mod acting as a machine to request assistance from station staff.</p> <p>This variant is seen in newer MTR Stations where the helpline sticker is separated from the helpline machine itself. For the variant with sticker attached, please see Helpline (With Sticker)</p>"},{"location":"players/blocks/helpline_2/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/helpline_2/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/helpline_2/#block-states","title":"Block states","text":"facing unpowered north true east false south west"},{"location":"players/blocks/helpline_2/#history","title":"History","text":"Version Changes Made v1.0.0 Added Helpline (No Sticker) v2.0.0 Right clicking now emits a redstone signal"},{"location":"players/blocks/helpline_hkwk/","title":"Help Line (West Kowloon Station Type)","text":"<p>A Help Line (West Kowloon Station Type) is a wall-attached block in Joban Client Mod, acting as a machine to request assistance from station staff.</p> <p>This block replicates the Help Line seen in the Hong Kong West Kowloon station.</p>"},{"location":"players/blocks/helpline_hkwk/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/helpline_hkwk/#crafting-recipe","title":"Crafting Recipe","text":"<p>Info</p> <p>This block is a creative-only block and does not have a crafting recipe.</p>"},{"location":"players/blocks/helpline_hkwk/#block-states","title":"Block states","text":"facing unpowered north true east false south west"},{"location":"players/blocks/helpline_hkwk/#history","title":"History","text":"Version Changes Made v2.0.0 Added Help Line (Hong Kong West Kowloon Variant)"},{"location":"players/blocks/helpline_standing/","title":"Help Line (Standing)","text":"<p>A Helpline (Standing) is a block in Joban Client Mod acting as a machine to request assistance from station staff.</p> <p>This variant is seen in MTR stations.</p>"},{"location":"players/blocks/helpline_standing/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/helpline_standing/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/helpline_standing/#block-states","title":"Block states","text":"facing third unpowered north lower true east middle false south upper west"},{"location":"players/blocks/helpline_standing/#history","title":"History","text":"Version Changes Made v1.0.6 Added Helpline (Standing) v1.1.4 Improved Helpline (Standing) texture v2.0.0 Right clicking now emits a redstone signalRename <code>jsblock:helpline_4</code> to <code>jsblock:helpline_standing</code>"},{"location":"players/blocks/helpline_standing_eal/","title":"Help Line (East Rail Line Type)","text":"<p>A Helpline (East Rail Line Type) is a block in Joban Client Mod acting as a machine to request assistance from station staff. </p> <p>This replicates the Help Line seen in stations along the MTR East Rail Line.</p>"},{"location":"players/blocks/helpline_standing_eal/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/helpline_standing_eal/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/helpline_standing_eal/#block-states","title":"Block states","text":"facing half unpowered north lower true east upper false south west"},{"location":"players/blocks/helpline_standing_eal/#history","title":"History","text":"Version Changes Made v1.0.0 Added Helpline (East Rail Type) v1.1.5 Hardness changed from 2.0 -&gt; 5.0 v2.0.0 Right clicking now emits a redstone signalRename <code>jsblock:helpline_3</code> to <code>jsblock:helpline_standing_eal</code>"},{"location":"players/blocks/inverted_signal_lights/","title":"Inverted Signal Lights","text":"<p>Inverted Signal Lights refers to a series of Signal Light Block that have signal aspects which are the opposite of what they are suppose to be.</p> <p>When a section is clear, it will display red, otherwise green/blue.</p>"},{"location":"players/blocks/inverted_signal_lights/#usage","title":"Usage","text":"<p>Same as MTR mod's Signal Lights.</p>"},{"location":"players/blocks/inverted_signal_lights/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/inverted_signal_lights/#blue-variant","title":"Blue variant","text":"<p>Note</p> <p>The red signal light in this crafting grid refers to any Signal Lights from the MTR mod</p>"},{"location":"players/blocks/inverted_signal_lights/#green-variant","title":"Green variant","text":""},{"location":"players/blocks/inverted_signal_lights/#block-states","title":"Block states","text":"facing is_22_5 is_45 north true true east false false south west"},{"location":"players/blocks/inverted_signal_lights/#block-entities","title":"Block entities","text":"<p>These blocks have a block entity, but does not store any data and are solely used for rendering.</p>"},{"location":"players/blocks/inverted_signal_lights/#history","title":"History","text":"Version Changes Made v1.0.0 Added Inverted Signal Lights v2.0.0 Allow signal lights to be placed in 22.5/45 degree increment."},{"location":"players/blocks/kcr_emg_stop_sign/","title":"KCR Emergency Stop Sign","text":"<p>A KCR Emergency Name Sign is a wall-attached block, resembling a sign pointing to the Emergency Button. This type of sign is seen on the Tuen Ma Line (Tai Wai -&gt; Wu Kai Sha) / Ma On Shan Line section in the MTR/ex-KCR Network.</p>"},{"location":"players/blocks/kcr_emg_stop_sign/#configuring","title":"Configuring","text":"<p>You can toggle the arrow direction by right clicking with the MTR mod Brush Item.</p>"},{"location":"players/blocks/kcr_emg_stop_sign/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/kcr_emg_stop_sign/#block-states","title":"Block states","text":"facing right north true east false south west"},{"location":"players/blocks/kcr_emg_stop_sign/#history","title":"History","text":"Version Changes Made v1.1.0 Added KCR Emergency Stop Sign v1.1.6 Arrow can now be toggled to the opposite direction"},{"location":"players/blocks/kcr_enquiry_machine/","title":"KCR Enquiry Machine (Wall-mounted)","text":"<p>A KCR Enquiry Machine (Wall mounted) is a block in Joban Client Mod, replicating enquiry machines that are mounted to the wall in the MTR railway network.</p>"},{"location":"players/blocks/kcr_enquiry_machine/#usage","title":"Usage","text":"<p>Right clicking on the block will display your current MTR balance value at the bottom of your screen.</p>"},{"location":"players/blocks/kcr_enquiry_machine/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/kcr_enquiry_machine/#block-states","title":"Block states","text":"facing north east south west Version Changes Made v1.1.2 Added KCR Enquiry Machine (Wall mounted) v1.1.5 Change Light Level to 4, blocks model always fullbright v2.0.0 Add GUI to display journey entry logsRename <code>jsblock:enquiry_machine_4</code> to <code>jsblock:kcr_enquiry_machine</code>"},{"location":"players/blocks/kcr_station_name_signs/","title":"KCR Station Name Signs","text":"<p>KCR Station Name Signs is a series of blocks in Joban Client Mod, replicating the hanging signs seen in KCR East Rail before the merger between KCR and MTR (Mass Transit Railway) in the real world.</p> <p>Both the normal variant and station-color variant is available.</p>"},{"location":"players/blocks/kcr_station_name_signs/#usage","title":"Usage","text":"<p>Place the sign below a block, the station name will be shown if the placed position is within a station area. For the station-color variant, the color of the sign will also change to the color of the station, if one exists.</p>"},{"location":"players/blocks/kcr_station_name_signs/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/kcr_station_name_signs/#kcr-station-name-sign","title":"KCR Station Name Sign","text":""},{"location":"players/blocks/kcr_station_name_signs/#kcr-station-name-sign-station-color","title":"KCR Station Name Sign (Station Color)","text":"<p>Note</p> <p>The blue dye in this crafting grid refers to any dye</p>"},{"location":"players/blocks/kcr_station_name_signs/#block-states","title":"Block states","text":"facing exit_on_left north false east true south west"},{"location":"players/blocks/kcr_station_name_signs/#block-entities","title":"Block entities","text":"<p>These blocks have a block entity, but does not store any data and are solely used for rendering.</p>"},{"location":"players/blocks/kcr_station_name_signs/#history","title":"History","text":"Version Changes Made v1.0.4 Added KCR Station Name Sign v1.0.6 Raised the block model v1.1.5 The \"font\" property is added to the block entity v2.0.0 The \"font\" property in block entity has been removed"},{"location":"players/blocks/kcr_trespass_sign/","title":"Trespass Signage (KCR)","text":"<p>A KCR Trespass Signage is a block in Joban Client Mod, replicating the trespass signage seen in KCR East Rail stations before the merger of KCR and MTR (Mass Transit Railway). </p>"},{"location":"players/blocks/kcr_trespass_sign/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/kcr_trespass_sign/#block-states","title":"Block states","text":"facing left north true east false south west"},{"location":"players/blocks/kcr_trespass_sign/#history","title":"History","text":"Version Changes Made v1.0.0 Added Trespass Signage (KCR) v2.0.0 Renamed <code>jsblock:tresspass_sign_2</code> to <code>jsblock:kcr_trespass_sign</code>"},{"location":"players/blocks/lcd_pids/","title":"Old Tsueng Kwan O PIDS","text":"<p>A Old Tsueng Kwan O Line PIDS is a block in Joban Client Mod which replicates the PIDS display seen along stations of the MTR Tsueng Kwan O Line, before being replaced with the Railway Vision PIDS display.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/lcd_pids/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol>"},{"location":"players/blocks/lcd_pids/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/lcd_pids/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/lcd_pids/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/lcd_pids/#history","title":"History","text":"Version Changes Made v1.0.6 Added Old TKL PIDS v1.1.2 Support Variables v1.1.4 Support PIDS Preset v1.1.8 Support multi-platform selecting v2.0.0 Rename <code>jsblock:pids_4</code> to <code>jsblock:lcd_pids</code>"},{"location":"players/blocks/light_lantern/","title":"Light Lantern","text":"<p>A Light Lantern is a wall-attached block in Joban Client Mod that mimics the light lamp seen in the Mockup photos of KCR East West Line stations.</p>"},{"location":"players/blocks/light_lantern/#crafting-recipe","title":"Crafting Recipe","text":"<p>Note</p> <p>The black concrete in this crafting grid refers to any concrete</p>"},{"location":"players/blocks/light_lantern/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/light_lantern/#history","title":"History","text":"Version Changes Made v1.0.0 Added Light Lantern v2.0.0 Rename <code>jsblock:light_1</code> to <code>jsblock:light_lantern</code>"},{"location":"players/blocks/light_source_block/","title":"Light Source Block","text":"<p>Marked for deprecation</p> <p>Due to the overlapping functionalities with the Minecraft Light Block, this block is marked for deprecation, and you are discouraged from using the block for new projects.</p> <p>Due to its history, the block will not be removed and kept for as long possible, however it is no longer designed to be placed, and existing functionalities may degrade overtime.</p> <p>A Light Source Block is a block that does not have a visual appearance nor a collision hitbox, and can emit lights from 0 - 15.</p> <p>When the player is holding the Light Source Block Item, all Light Blocks around the player will display a Light Icon.</p> <p>This behavior is almost the same as the light block introduced in Minecraft 1.17, with the exception that player can still see the visual hitbox without holding the item.</p>"},{"location":"players/blocks/light_source_block/#usage","title":"Usage","text":"<p>You may right click the block while holding the block item to cycle the light level from 0 - 15</p>"},{"location":"players/blocks/light_source_block/#crafting-recipe","title":"Crafting Recipe","text":"<p>Info</p> <p>This block is a creative-only block and does not have a crafting recipe.</p>"},{"location":"players/blocks/light_source_block/#block-states","title":"Block states","text":"level 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15"},{"location":"players/blocks/light_source_block/#history","title":"History","text":"Version Changes Made v1.0.0 Added Light Source Block. v1.1.0 Added Block Entity to Light Source Block. v1.1.2 Light Source Block's Light Level can now be configured.Light Source Block now displays an particle when holding the item. v1.1.4 Removed Block Entity from Light Source Block. v1.1.6 Light Source Block can now be replaced by another block when right clicked on it. v2.0.0 Particle icon is not re-added in the rewritten version, and the block is scheduled for deprecation."},{"location":"players/blocks/lrt_inter_car_barriers/","title":"LRT Inter-Car Barriers","text":"<p>LRT Inter-Car Barriers is a series of blocks in Joban Client Mod that are designed to be placed on the platform block between vehicle cars to stop people from boarding between car connectors.</p> <p>It is divided into 3 parts: Left, Middle and Right.</p>"},{"location":"players/blocks/lrt_inter_car_barriers/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/lrt_inter_car_barriers/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/lrt_inter_car_barriers/#lrt-inter-car-barrier-left","title":"LRT Inter Car Barrier (Left)","text":""},{"location":"players/blocks/lrt_inter_car_barriers/#lrt-inter-car-barrier-middle","title":"LRT Inter Car Barrier (Middle)","text":""},{"location":"players/blocks/lrt_inter_car_barriers/#lrt-inter-car-barrier-right","title":"LRT Inter Car Barrier (Right)","text":""},{"location":"players/blocks/lrt_inter_car_barriers/#history","title":"History","text":"Version Changes Made v1.1.5 Added LRT Inter-Car Barriers v2.0.0 Rename <code>jsblock:inter_car_barrier_1_left</code> to <code>jsblock:lrt_inter_car_barrier_left</code>Rename <code>jsblock:inter_car_barrier_1_middle</code> to <code>jsblock:lrt_inter_car_barrier_middle</code>Rename <code>jsblock:inter_car_barrier_1_right</code> to <code>jsblock:lrt_inter_car_barrier_right</code>"},{"location":"players/blocks/lrt_trespass_sign/","title":"LRT Trespass Signage","text":"<p>A LRT Trespass Signage is a decorative block in Joban Client Mod, replicating a vertical sign placed on the track at the end of platform reminding passengers to not trespass between tracks.</p>"},{"location":"players/blocks/lrt_trespass_sign/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/lrt_trespass_sign/#block-states","title":"Block states","text":"facing half north upper east lower south west"},{"location":"players/blocks/lrt_trespass_sign/#history","title":"History","text":"Version Changes Made v1.1.5 Added LRT Trespass Signage v2.0.0 Renamed <code>jsblock:trespass_sign_3</code> to <code>jsblock:lrt_trespass_sign</code>"},{"location":"players/blocks/mtr_enquiry_machine/","title":"Enquiry Machine","text":"<p>An Enquiry Machine is a block in Joban Client Mod that replicates the older-generation enquiry machine seen in the MTR railway network.</p>"},{"location":"players/blocks/mtr_enquiry_machine/#usage","title":"Usage","text":"<p>Right clicking on the block will show a screen depicting the historic record of your journey. These journey records are saved in-game whenever you exit a station through the Exit Barrier block or the ticket processor.</p>"},{"location":"players/blocks/mtr_enquiry_machine/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/mtr_enquiry_machine/#block-states","title":"Block states","text":"facing half north lower east upper south west"},{"location":"players/blocks/mtr_enquiry_machine/#history","title":"History","text":"Version Changes Made v1.0.0 Added Enquiry Machine v2.0.0 Add GUI to display journey entry logsRename <code>jsblock:enquiry_machine_1</code> to <code>jsblock:mtr_enquiry_machine</code>"},{"location":"players/blocks/mtr_enquiry_machine_wall/","title":"Enquiry Machine (Wall-mounted)","text":"<p>A Enquiry Machine (Wall Mounted) is a block in Joban Client Mod, replicating enquiry machines that are mounted to the wall in the MTR Network.</p>"},{"location":"players/blocks/mtr_enquiry_machine_wall/#usage","title":"Usage","text":"<p>Right clicking on the block will show a screen depicting the historic record of your journey. These journey records are saved in-game whenever you exit a station through the Exit Barrier block or the ticket processor.</p>"},{"location":"players/blocks/mtr_enquiry_machine_wall/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/mtr_enquiry_machine_wall/#block-states","title":"Block states","text":"facing north east south west Version Changes Made v1.1.1 Added Enquiry Machine (Wall Mounted) v1.1.5 Change Light Level to 4, blocks model always fullbright v2.0.0 Add GUI to display journey entry logsRename <code>jsblock:enquiry_machine_3</code> to <code>jsblock:mtr_enquiry_machine_wall</code>"},{"location":"players/blocks/mtr_stairs/","title":"MTR Stairs","text":"<p>A MTR Stair is a textured stair block, replicating a type of stairs seen in the Hong Kong MTR premises.</p> <p>This block is a retextured Minecraft Stair, for more detail please visit the Stairs article in the Minecraft Wiki.</p>"},{"location":"players/blocks/mtr_stairs/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/mtr_stairs/#known-issues","title":"Known issues","text":"<p>Since the stair model is not modified, texture may not wrap properly as intended by Minecraft stairs.</p> <p>The texture may look glitched when viewed from the side/making an \"L\" shape stair.</p>"},{"location":"players/blocks/mtr_stairs/#history","title":"History","text":"Version Changes Made v1.1.4 Added MTR Stairs v2.0.0 Rename <code>jsblock:mtr_stairs_1</code> to <code>jsblock:mtr_stairs</code>"},{"location":"players/blocks/mtr_trespass_sign/","title":"Trespass Signage","text":"<p>A MTR Trespass Signage is a block in Joban Client Mod, reminding passengers to not trespass between tracks.</p>"},{"location":"players/blocks/mtr_trespass_sign/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/mtr_trespass_sign/#block-states","title":"Block states","text":"facing left north true east false south west"},{"location":"players/blocks/mtr_trespass_sign/#history","title":"History","text":"Version Changes Made v1.0.0 Added MTR Trespass Signage v2.0.0 Renamed <code>jsblock:trespass_sign_1</code> to <code>jsblock:mtr_trespass_sign</code>"},{"location":"players/blocks/operator_button/","title":"Operator Button","text":"<p>An Operator Button is a wall-attached block in Joban Client Mod, designed to only activate when players hold an authorized driver key. It is modelled after a authorization lock seen in stations of the MTR West Rail Line section.</p>"},{"location":"players/blocks/operator_button/#usage","title":"Usage","text":"<p>If the player right clicks the operator button with an accepted train driver key (Configurable, see below) in the MTR mod, the button will emit a redstone signal lasting 40 ticks (2 seconds).</p> <p>This block can be placed besides an iron door, in which only player with the appropriate train driver key may get in.</p>"},{"location":"players/blocks/operator_button/#configuring","title":"Configuring","text":"<p>You may right click the block with the Brush item provided by the MTR mod to configure which driver keys are allowed to activate the block. By default, all train driver keys are accepted.</p>"},{"location":"players/blocks/operator_button/#crafting-recipe","title":"Crafting Recipe","text":"<p>Note</p> <p>The black concrete in this crafting grid refers to any concrete</p>"},{"location":"players/blocks/operator_button/#block-states","title":"Block states","text":"facing powered north true east false south west"},{"location":"players/blocks/operator_button/#history","title":"History","text":"Version Changes Made v1.0.4 Added Operator Only Button v1.0.5 Reshaped Operator Only Button v1.1.5 Operator Only button now emits redstone signal v1.1.6 Light Level reduced from 15 -&gt; 8, texture has been dimmed v2.0.0 Multiple driver keys may now be acceptedRename <code>jsblock:op_button</code> to <code>jsblock:operator_button</code>"},{"location":"players/blocks/pids_1a/","title":"PIDS 1A","text":"<p>The PIDS 1A is a block in Joban Client Mod which is based on the <code>pids_1</code> PIDS block in MTR Mod, with 3 arrival rows and enlarged text.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/pids_1a/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol>"},{"location":"players/blocks/pids_1a/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/pids_1a/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/pids_1a/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/pids_1a/#history","title":"History","text":"Version Changes Made v1.1.4 Added PIDS 1A"},{"location":"players/blocks/pids_projector/","title":"PIDS Projector","text":"<p>A PIDS Projector is a transparent block that has the ability to project PIDS display with offset and rotation.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/pids_projector/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol> <p>For visualization purposes, holding the Brush item from the MTR mod allows you to see a red outline coming from the projector.</p>"},{"location":"players/blocks/pids_projector/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod. Additional options such as position offset, scale &amp; rotation can be configured as well.</p>"},{"location":"players/blocks/pids_projector/#crafting-recipe","title":"Crafting Recipe","text":"<p>Info</p> <p>This block is a creative-only block and does not have a crafting recipe.</p>"},{"location":"players/blocks/pids_projector/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/pids_projector/#history","title":"History","text":"Version Changes Made v2.0.0 Added PIDS Projector"},{"location":"players/blocks/rv_enquiry_machine/","title":"Railway Vision Enquiry Machine","text":"<p>A Railway Vision Enquiry Machine is a block in Joban Client Mod, replicating the new enquiry machines installed by MTR as part of their Railway Vision initiative.</p>"},{"location":"players/blocks/rv_enquiry_machine/#usage","title":"Usage","text":"<p>Right clicking on the block will display your current MTR balance value at the bottom of your screen.</p>"},{"location":"players/blocks/rv_enquiry_machine/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/rv_enquiry_machine/#block-states","title":"Block states","text":"facing half north lower east upper south west"},{"location":"players/blocks/rv_enquiry_machine/#history","title":"History","text":"Version Changes Made v1.1.1 Added Enquiry Machine v2.0.0 Add GUI to display journey entry logsRename <code>jsblock:enquiry_machine_2</code> to <code>jsblock:rv_enquiry_machine</code>"},{"location":"players/blocks/rv_pids/","title":"Railway Vision PIDS","text":"<p>A Railway Vision PIDS is a block in Joban Client Mod which replicates the Railway Vision styled PIDS display seen along stations of the MTR Network.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/rv_pids/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol>"},{"location":"players/blocks/rv_pids/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/rv_pids/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/rv_pids/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/rv_pids/#history","title":"History","text":"Version Changes Made v1.0.4 Added Railway Vision PIDS v1.0.4a Platforms with Multiple Digit now displays betterFix platform circle being black when using shadersNow show cars when there's Mixed Cars in the route v1.0.5 Add Railway Vision PIDS Pole v1.1.2 Added PIDS Variables Support v1.1.4 Added PIDS Preset Support v1.1.8 Added Platform Selection Support v2.0.0 Rename <code>jsblock:pids_rv</code> to <code>jsblock:rv_pids</code>"},{"location":"players/blocks/rv_pids_pole/","title":"Railway Vision PIDS Pole","text":"<p>A Railway Vision PIDS Pole is a block in Joban Client Mod, used in conjunction with all PIDS block provided by Joban Client Mod (Except PIDS 1A).</p>"},{"location":"players/blocks/rv_pids_pole/#usage","title":"Usage","text":"<p>Place the pole on top of any PIDS block provided by Joban Client Mod (Except PIDS 1A) to extend the pole support.</p>"},{"location":"players/blocks/rv_pids_pole/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/rv_pids_pole/#block-states","title":"Block states","text":"facing is_slab north true east false south west"},{"location":"players/blocks/rv_pids_pole/#history","title":"History","text":"Version Changes Made v1.0.5 Added RV PIDS Pole v1.1.4 Railway Vision PIDS Pole now supports extending when a slab is on top"},{"location":"players/blocks/rv_pids_sil_1/","title":"Railway Vision PIDS (SIL, Ocean Park/Wong Chuk Hang Station Variant)","text":"<p>A Railway Vision PIDS (SIL, Ocean Park &amp; Wong Chuk Hang Station Variant) is a block in Joban Client Mod which replicates the PIDS display seen in Ocean Park and Wong Chuk Hang station in the MTR South Island Line.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/rv_pids_sil_1/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol>"},{"location":"players/blocks/rv_pids_sil_1/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/rv_pids_sil_1/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/rv_pids_sil_1/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/rv_pids_sil_1/#history","title":"History","text":"Version Changes Made v1.1.0 Added Railway Vision PIDS (SIL 1) v1.1.2 Added PIDS Variables Support v1.1.4 Added PIDS Preset Support v1.1.8 Added Platform Selection Support v2.0.0 Rename <code>jsblock:pids_rv_sil</code> to <code>jsblock:rv_pids_sil_1</code>"},{"location":"players/blocks/rv_pids_sil_2/","title":"Railway Vision PIDS (SIL, Admiralty/South Horizons Station Variant)","text":"<p>A Railway Vision PIDS (SIL, Admiralty &amp; South Horizons Station Variant) is a block in Joban Client Mod which replicates the PIDS display seen in Admiralty and South Horizons station in the MTR South Island Line.</p> <p>This block is a part of JCM PIDS, which includes extra features such as PIDS Preset and more.</p>"},{"location":"players/blocks/rv_pids_sil_2/#usage","title":"Usage","text":"<ol> <li>Place this block down</li> <li> <ol> <li>If near a platform, the PIDS will show the scheduled arrival for that platform.</li> </ol> </li> <li> <ol> <li>If away from any platform, you may manually specify platform(s) to show if the PIDS is located inside a MTR station.</li> </ol> </li> </ol>"},{"location":"players/blocks/rv_pids_sil_2/#configuring","title":"Configuring","text":"<p>The PIDS can be configured by right clicking the block with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/rv_pids_sil_2/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/rv_pids_sil_2/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/rv_pids_sil_2/#history","title":"History","text":"Version Changes Made v1.1.2 Added Railway Vision PIDS (SIL 2) v1.1.4 Added PIDS Preset Support v1.1.8 Added Platform Selection Support v2.0.0 Rename <code>jsblock:pids_rv_sil_2</code> to <code>jsblock:rv_pids_sil_2</code>"},{"location":"players/blocks/sil_emg_stop_button/","title":"Emergency stop button (SIL)","text":"<p>An Emergency Train Stop Button (SIL) is a block in Joban Client Mod that replicates the emergency stop button seen in stations along the MTR South Island Line.</p>"},{"location":"players/blocks/sil_emg_stop_button/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/sil_emg_stop_button/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/sil_emg_stop_button/#block-states","title":"Block states","text":"facing third unpowered north upper true east middle false south lower west"},{"location":"players/blocks/sil_emg_stop_button/#history","title":"History","text":"Version Changes Made v1.1.1 Added Emergency Train Stop Button (SIL) v1.1.5 Now extends ThirdBlockBase, no longer replace blocks above v2.0.0 Right clicking now emits a redstone signalRename <code>jsblock:helpline_6</code> to <code>jsblock:sil_emg_stop_button</code>"},{"location":"players/blocks/sound_looper/","title":"Sound Looper","text":"<p>A Sound Looper is a block in a Joban Client Mod that plays in-game sound repeatedly at a configurable interval, either for all player or for those in a certain block range.</p>"},{"location":"players/blocks/sound_looper/#configuring","title":"Configuring","text":"<p>Configuration such as Repeating Interval, Sound ID, Limited Block Range can be configured by right clicking with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/sound_looper/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/sound_looper/#block-entity","title":"Block entity","text":"<p>This block has a block entity, and stores the following data:</p> Name Type Description Default Value pos1 long The first set of positions encoded in Long 0L pos2 long The second set of positions encoded in Long 0L limit_range boolean Whether the range should be limited between pos1 and pos2 0b sound_id string The Sound ID to play \"\" volume float The volume where the sound will play 1.0f"},{"location":"players/blocks/sound_looper/#history","title":"History","text":"Version Changes Made v1.0.8 Added Sound Looper v1.1.2 Sound looper may now be limited in a range"},{"location":"players/blocks/spot_lamp/","title":"Spot Lamp","text":"This is like the block you use when you don't know how to light it up - LX86 <p>A Spot Lamp is a decorative block in Joban Client Mod that acts as a light source in-game.</p>"},{"location":"players/blocks/spot_lamp/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/spot_lamp/#block-states","title":"Block states","text":"ceiling powered true true false false"},{"location":"players/blocks/spot_lamp/#history","title":"History","text":"Version Changes Made v1.0.0 Added Spot Light v1.0.6 Spot Light can now be placed on the ground v2.0.0 Rename <code>jsblock:light_2</code> to <code>jsblock:spot_lamp</code>"},{"location":"players/blocks/static_signal_lights/","title":"Static Signal Lights","text":"<p>Static Signal Light refers to a series of Signal Lights in Joban Client Mod where it's always lit in 1 color.</p> <p>Its purpose is to provide a dummy decoration-only signal light.</p>"},{"location":"players/blocks/static_signal_lights/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/static_signal_lights/#static-signal-light-red-below","title":"Static Signal Light (Red below)","text":""},{"location":"players/blocks/static_signal_lights/#static-signal-light-red-above","title":"Static Signal Light (Red above)","text":""},{"location":"players/blocks/static_signal_lights/#static-signal-light-blue","title":"Static Signal Light (Blue)","text":""},{"location":"players/blocks/static_signal_lights/#static-signal-light-green","title":"Static Signal Light (Green)","text":""},{"location":"players/blocks/static_signal_lights/#block-states","title":"Block states","text":"facing is_22_5 is_45 north true true east false false south west"},{"location":"players/blocks/static_signal_lights/#block-entities","title":"Block entities","text":"<p>These blocks have a block entity, but does not store any data and are solely used for rendering.</p>"},{"location":"players/blocks/static_signal_lights/#history","title":"History","text":"Version Changes Made v1.0.0 Added Static Signal Light v1.1.5 Fix Blue Signal Light being located at the bottom rather than top v2.0.0 Allow signal lights to be placed in 22.5/45 degree increment."},{"location":"players/blocks/station_ceiling_wrl_poles/","title":"Station Ceiling Poles","text":"<p>Station Ceiling Poles refers to a series of poles in Joban Client Mod that extends the Station Ceilings (2009) blocks.</p>"},{"location":"players/blocks/station_ceiling_wrl_poles/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/station_ceiling_wrl_poles/#double-pane-variant","title":"Double Pane variant","text":""},{"location":"players/blocks/station_ceiling_wrl_poles/#single-pane-variant","title":"Single Pane variant","text":"<p>No crafting recipe available for Single Pane variant yet!</p>"},{"location":"players/blocks/station_ceiling_wrl_poles/#block-states","title":"Block states","text":""},{"location":"players/blocks/station_ceiling_wrl_poles/#double-pane-variant_1","title":"Double Pane variant","text":"facing left is_slab north true true east false false south west"},{"location":"players/blocks/station_ceiling_wrl_poles/#single-pane-variant_1","title":"Single Pane variant","text":"facing is_slab north true east false south west"},{"location":"players/blocks/station_ceiling_wrl_poles/#history","title":"History","text":"Version Changes Made v1.1.2 Added Station Ceiling v2.0.0 Added Single Pane variantRename <code>jsblock:station_ceiling_pole</code> to <code>jsblock:station_ceiling_wrl_pole</code>"},{"location":"players/blocks/station_ceilings_wrl/","title":"Station Ceilings (2009)","text":"<p>Station Ceilings (2009) refers to a series of blocks resembling the ceilings seen in stations of the Kowloon Southern Line extension for the MTR West Rail Line, which opened in the year 2009.</p> <p>A Double Pane, Single Pane and Station Colored variants are offered by this block.</p>"},{"location":"players/blocks/station_ceilings_wrl/#crafting-recipes","title":"Crafting Recipes","text":""},{"location":"players/blocks/station_ceilings_wrl/#double-pane-variant","title":"Double Pane variant","text":""},{"location":"players/blocks/station_ceilings_wrl/#double-pane-station-color-variant","title":"Double Pane (Station Color) variant","text":"<p>Note</p> <p>The blue dye in this crafting grid refers to any dye</p>"},{"location":"players/blocks/station_ceilings_wrl/#single-pane-variants","title":"Single Pane variants","text":"<p>No crafting recipe available for Single Pane variant yet!</p>"},{"location":"players/blocks/station_ceilings_wrl/#block-states","title":"Block states","text":""},{"location":"players/blocks/station_ceilings_wrl/#double-pane-variant_1","title":"Double Pane variant","text":"facing left north true east false south west"},{"location":"players/blocks/station_ceilings_wrl/#single-pane-variant","title":"Single Pane variant","text":"facing north east south west"},{"location":"players/blocks/station_ceilings_wrl/#history","title":"History","text":"Version Changes Made v1.1.2 Added Station Ceiling v1.1.5 Added Station Colored variant v2.0.0 Added Single Pane variantRename <code>jsblock:station_ceiling_1</code> to <code>jsblock:station_ceiling_wrl</code>"},{"location":"players/blocks/station_name_standing/","title":"Standing Station Name Sign","text":"<p>Block deprecated</p> <p>This block has been merged to the main MTR mod since MTR 4.0.</p> <p>Thus, this block is no longer obtainable as an item, and you should use the standing station name block from the MTR mod.</p> <p>For backward compatibility, existing blocks will continue to work for now.</p> <p>A Standing Station Name Sign is a block in Joban Client Mod that replicates the standing station name sign seen in the Tuen Ma Line (Tuen Mun &lt;-&gt; Kam Sheung Road) section after the KCR and MTR merger.</p>"},{"location":"players/blocks/station_name_standing/#configuring","title":"Configuring","text":"<p>You can right click the block with the Brush item provided by the MTR mod to change the text color.</p>"},{"location":"players/blocks/station_name_standing/#crafting-recipe","title":"Crafting Recipe","text":"<p>Deprecated in v2</p> <p>This block has been deprecated and the corresponding item is removed, along with the following recipe.</p>"},{"location":"players/blocks/station_name_standing/#block-states","title":"Block states","text":"facing metal third color north true lower 0 (White) east false middle 1 (Gray) south upper 2 (Black) west"},{"location":"players/blocks/station_name_standing/#block-entity","title":"Block entity","text":"<p>This block has a block entity, but does not store any data and is solely used for rendering.</p>"},{"location":"players/blocks/station_name_standing/#history","title":"History","text":"Version Changes Made v1.0.0 Added Standing Station Name Sign v1.1.3 Text are now drawn with Dynamic Images v2.0.0 Rename <code>jsblock:station_name_tall_stand</code> to <code>station_name_standing</code>Deprecate block as merged into MTR 4."},{"location":"players/blocks/subsidy_machine/","title":"Subsidy Machine","text":"<p>A Subsidy Machine is a functional block in Joban Client Mod, modelled after the Subsidy Collection Point seen in MTR premises.</p>"},{"location":"players/blocks/subsidy_machine/#usage","title":"Usage","text":"<p>The balance amount set for this block will be added to your MTR balance when right clicked.</p> <p>Depending on how the block is configured, there may be a cooldown period before you can continue filling your balance.</p>"},{"location":"players/blocks/subsidy_machine/#configuring","title":"Configuring","text":"<p>You may configure the balance amount provided by the machine and cooldown period by right clicking with the Brush item provided by the MTR mod.</p>"},{"location":"players/blocks/subsidy_machine/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/subsidy_machine/#block-states","title":"Block states","text":"facing north east south west"},{"location":"players/blocks/subsidy_machine/#block-entity","title":"Block entity","text":"<p>This block has a block entity, and stores the following data:</p> Name Type Description Default Value timeout integer How long the player need to wait after using this block (In Seconds) 0 price_per_click integer Amount of balance that will be added 10"},{"location":"players/blocks/subsidy_machine/#history","title":"History","text":"Version Changes Made v1.0.0 Added Subsidy Machine v1.1.4 Subsidy Machine is now configurable, with timeout and price per click. v2.0.0 Rename <code>jsblock:subsidy_machine_1</code> to <code>jsblock:subsidy_machine</code>"},{"location":"players/blocks/tcl_emg_stop_button/","title":"Emergency stop button (TCL)","text":"<p>An Emergency Stop Button is a wall-attached block in Joban Client Mod which replicates the Emergency Stop Button seen in Tung Chung Line stations.</p>"},{"location":"players/blocks/tcl_emg_stop_button/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/tcl_emg_stop_button/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/tcl_emg_stop_button/#block-states","title":"Block states","text":"facing unpowered north true east false south west"},{"location":"players/blocks/tcl_emg_stop_button/#history","title":"History","text":"Version Changes Made v1.0.0 Added Emergency Stop Button (TCL) v2.0.0 Right clicking now emits a redstone signalRename <code>jsblock:emg_stop_1</code> to <code>jsblock:tcl_emg_stop_button</code>"},{"location":"players/blocks/thales_ticket_barriers/","title":"Thales Ticket Barriers","text":"<p>Thales Ticket Barriers is a series of ticket barriers in Joban Client Mod, modelled after a variant of Ticket Barriers manufactured by the Thales Group.</p>"},{"location":"players/blocks/thales_ticket_barriers/#usage","title":"Usage","text":""},{"location":"players/blocks/thales_ticket_barriers/#thales-ticket-barrier-entranceexit","title":"Thales Ticket Barrier (Entrance/Exit)","text":"<p>You can walk through the ticket barrier in a defined station area to pass through the gates.</p> <p>They function identically to the Ticket Barriers in the MTR mod.</p>"},{"location":"players/blocks/thales_ticket_barriers/#thales-ticket-barrier-bare","title":"Thales Ticket Barrier (Bare)","text":"<p>By placing an MTR fence next to the Thales Ticket Barrier (Bare) variant, the barrier will automatically connect to the fence with a shorter variants.</p> <p></p>"},{"location":"players/blocks/thales_ticket_barriers/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/thales_ticket_barriers/#ticket-barrier-entrance","title":"Ticket Barrier (Entrance)","text":""},{"location":"players/blocks/thales_ticket_barriers/#ticket-barrier-exit","title":"Ticket Barrier (Exit)","text":""},{"location":"players/blocks/thales_ticket_barriers/#ticket-barrier-bare","title":"Ticket Barrier (Bare)","text":""},{"location":"players/blocks/thales_ticket_barriers/#block-states","title":"Block states","text":""},{"location":"players/blocks/thales_ticket_barriers/#thales-ticket-barrier-entrance-exit","title":"Thales Ticket Barrier (Entrance / Exit)","text":"facing open north closed east pending south open west open_concessionary"},{"location":"players/blocks/thales_ticket_barriers/#thales-ticket-barrier-bare_1","title":"Thales Ticket Barrier (Bare)","text":"facing type flipped north 0 true east 1 false south 2 west 3 4 5 6 7 8 9 10"},{"location":"players/blocks/thales_ticket_barriers/#history","title":"History","text":"Version Changes Made v1.0.6 Added Thales Ticket Barrier v1.1.5 Improved Thales Ticket Barrier Block Model v1.1.6 Make Thales Ticket Barrier (Bare) attachable to MTR Fence v1.2.2 Make fence stay as is if a block is next to the barrier fence v2.0.0 Rename <code>jsblock:ticket_barrier_1_entrance</code> to <code>jsblock:thales_ticket_barrier_entrance</code>Rename <code>jsblock:ticket_barrier_1_exit</code> to <code>jsblock:thales_ticket_barrier_exit</code>Rename <code>jsblock:ticket_barrier_1_bare</code> to <code>jsblock:thales_ticket_barrier_bare</code>"},{"location":"players/blocks/tml_emg_stop_button/","title":"Emergency stop button (TML)","text":"<p>An Emergency Train Stop Button (Standing, TML) is a block in Joban Client Mod, modelled after the emergency train stop facility in the new MTR Hung Hom platforms.</p>"},{"location":"players/blocks/tml_emg_stop_button/#usage","title":"Usage","text":"<p>Right clicking the block would emit a redstone signal for 20 in-game ticks (or 1 second).</p>"},{"location":"players/blocks/tml_emg_stop_button/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/tml_emg_stop_button/#block-states","title":"Block states","text":"facing third unpowered north upper true east middle false south lower west"},{"location":"players/blocks/tml_emg_stop_button/#history","title":"History","text":"Version Changes Made v1.1.0 Added Emergency Stop Button (Standing, TML) v1.1.5 Now extends ThirdBlockBase, no longer replaces the block on top. v2.0.0 Right clicking now emits a redstone signalRename <code>jsblock:helpline_5</code> to <code>jsblock:tml_emg_stop_button</code>"},{"location":"players/blocks/train_model_e44/","title":"E44 Train Model","text":"The dream train model every rail fan would want to obtain at any cost - AozoraSky <p>An E44 Train Model is a decorative block in Joban Client Mod, representing a 1:87 HO scale E44 train model</p>"},{"location":"players/blocks/train_model_e44/#crafting-recipe","title":"Crafting Recipe","text":"<p>Note</p> <p>The black concrete in this crafting grid refers to any concrete</p>"},{"location":"players/blocks/train_model_e44/#block-states","title":"Block states","text":"facing left north true east false south west"},{"location":"players/blocks/train_model_e44/#history","title":"History","text":"Version Changes Made v1.0.0 Added Train Model (E44)"},{"location":"players/blocks/water_machine/","title":"Water Machine","text":"<p>A Water Machine is a block in Joban Client Mod, modelled after water supply machines in MTR stations.</p>"},{"location":"players/blocks/water_machine/#usage","title":"Usage","text":"<p>You may refill a water bottle/bucket by right clicking on the water machine with the corresponding item (Empty Bottle/Empty Bucket).</p>"},{"location":"players/blocks/water_machine/#crafting-recipe","title":"Crafting Recipe","text":""},{"location":"players/blocks/water_machine/#block-states","title":"Block states","text":"facing half north lower east upper south west"},{"location":"players/blocks/water_machine/#history","title":"History","text":"Version Changes Made v1.0.0 Added Water Machines v2.0.0 Allow water bucket to be filledRenamed <code>jsblock:water_machine_1</code> to <code>jsblock:water_machine</code>"},{"location":"players/features/jcm-pids/","title":"JCM PIDS","text":"<p>PIDS blocks in the Joban Client Mod behaves mostly similarly to the PIDS in MTR mod, however it has several extra features which are listed belows.</p>"},{"location":"players/features/jcm-pids/#pids-preset","title":"PIDS Preset","text":"<p>A PIDS Preset (Or PIDS Layout if you prefer that) is a set of configuration which defines how a PIDS should look.</p> <p>For instance, the RV PIDS by default looks different from the LCD PIDS. That's because they are both using different preset. A PIDS Preset can be chosen by right clicking a PIDS block provided by Joban Client Mod with the Brush item provided by the MTR mod.</p> <p>Custom PIDS Preset can be created through the use of resource packs, you can head over to the Developer Documentation if you want to learn more about creating your own PIDS Preset.</p> <p>Alternatively you may explore the various resource packs published online which adds extra PIDS preset to the game.</p>"},{"location":"players/features/jcm-pids/#pids-variable","title":"PIDS Variable","text":"<p>PIDS in Joban Client Mod also allows you to enter a dynamic variable in the PIDS's Custom Message section.</p> <p>A variable is essentially a text formatted in a specific way, in which it will be replaced with a dynamic value when displaying. You can add any of the following variable by inserting the variable name into your custom message.</p> Variable Name Description Version Added <code>{weather}</code> The weather of the current world, possible values are:\"Sunny\", \"Raining\", \"Thundering\" v1.1.2 <code>{time}</code> The current world time, returns \"HH:MM\" v1.1.2 <code>{time_period}</code> The current time period, possible values are:\"Morning\", \"Afternoon\", \"Night\" v1.1.2 <code>{weatherChin}</code> The weather of the current world in chinese.Possible values are: \"\u6674\u5929\", \"\u4e0b\u96e8\", \"\u96f7\u66b4\" v1.1.4 <code>{worldPlayer}</code> Current amount of player on the current world v1.1.4 <code>{day}</code> The day elapsed (Same as the one shown in F3 Screen) v1.1.5"},{"location":"players/features/mod-integrations/","title":"Mod Integrations","text":"<p>JCM integrates with other mods to provide a complete experience for modded players, which are listed below.</p>"},{"location":"players/features/mod-integrations/#item-descriptions","title":"Item Descriptions","text":"<p>Item Descriptions is a mod that adds a short textual description to in-game blocks/item/entities.</p> <p>JCM also adds textual description for its block item, which can be viewed by holding the Ctrl key with Item Descriptions installed.</p> <p></p>"},{"location":"players/features/tunnel/","title":"Tunnel Wall","text":"<p>In Joban Client Mod v2, it is now possible to add tunnel wall in the form of a Rail Model, instead of using in its block form which is suboptimal during curves.</p>"},{"location":"players/features/tunnel/#adding-tunnel-wall-along-a-track","title":"Adding tunnel wall along a track","text":""},{"location":"players/features/tunnel/#1-connect-a-rail","title":"1. Connect a rail","text":""},{"location":"players/features/tunnel/#2-right-click-the-rail-node-with-the-mtr-brush-item-then-click-edit","title":"2. Right click the Rail Node with the MTR Brush Item, then click Edit","text":""},{"location":"players/features/tunnel/#3-add-jcm-circular-tunnel","title":"3. Add JCM Circular Tunnel","text":""},{"location":"players/features/tunnel/#4-finished","title":"4. Finished!","text":""},{"location":"players/versions/","title":"Versions &amp; Download Archive","text":"<p>This page lists all released versions of Joban Client Mod v1, including its changelog and download link.</p> <p>For Joban Client Mod v2, please visit the GitHub release page.</p> Version Tags v1.2.2 v1.2.1-hotfix-1 v1.2.1 v1.2.0 v1.1.9 v1.1.8 v1.1.7 v1.1.6-hotfix-1 v1.1.6 v1.1.5-hotfix-1 v1.1.5 v1.1.4-hotfix-1 v1.1.4 v1.1.3 v1.1.2 v1.1.1 v1.1.0a v1.1.0 v1.0.9 v1.0.8 v1.0.7 v1.0.6 v1.0.5a No Changelog v1.0.5 v1.0.4a v1.0.4 v1.0.3 No Changelog v1.0.2 No Changelog v1.0.1 No Changelog v1.0.0"},{"location":"players/versions/v1.0.0/","title":"v1.0.0","text":"<p>Want a more immersive MTR mod experience with more functional entities and blocks? Soughing for more functional facilities found in the real life MTR to be included in your world? Then you're in the right place to discover the true ability of Joestu Client Mod!</p> <p>In Country of Joestu, we strive to bring quality and intriguing experience to visitors via quality railway and optimization of mods. The Joestu Client Mod addon is specially tailored made for Country of Joestu with exclusive blocks and functions that will bring the experience of Minecraft Transit Railway Mod to another level! Providing different types of functioning in real life blocks such as enquiry machines and subsidy machines, you can easily add more fun side by side to MTR mod. You can also make your own station and server to stand out from others by using high-quality tailor made decoration blocks such as emergency help-lines, or even the famous East Rail Line \"Headway countdown\" and \"Butterfly Light\". Other features included in the mod are functional water-dispenser, highly detailed E44 Yellow Head box models and much more!</p> <p>Joestu Client Mod is also compatible for other MTR mod servers and world, so that you can enjoy the immersive experience even outside Country of Joestu by a simple act of downloading the mod file attached below! To honoring the hard work of our staff members who has spent lots of time on creating such mod, a simple credit will be more than enough whenever you use the mod in your very own server or private world. If you are interested in enhancing the mod via modifications, please feel free to ask our staffs for permission and help, and we will be more than happy to offer the assistance to you, so as to make Joestu Client Mod a better mod for everyone to enjoy.</p> <p>*Please bear in mind that both servers and clients must install the mod to ensure the mod functions normally.</p>"},{"location":"players/versions/v1.0.0/#download","title":"Download","text":"<ul> <li>Fabric 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.1/","title":"v1.0.1","text":"<p>Missing Changelog</p> <p>The changelog of this release of JCM is missing. All changes will be listed based on the git commit. You may help by replacing this page with the original changelog from JCM v1.0.1 if found.</p>"},{"location":"players/versions/v1.0.1/#addition","title":"Addition","text":"<ul> <li>Add Exit Signs</li> </ul>"},{"location":"players/versions/v1.0.1/#changes","title":"Changes","text":"<ul> <li>The block model for Helpline has been brightened</li> <li>Textures improvement for Enquiry Machine and Emergency Stop Button (TCL)</li> </ul>"},{"location":"players/versions/v1.0.1/#fixes","title":"Fixes","text":"<ul> <li>Fixes crash when right clicking with Trespass signage</li> <li>Fix mismatching balance when using the Subsidy Machine</li> </ul>"},{"location":"players/versions/v1.0.2/","title":"v1.0.2","text":"<p>Missing Changelog</p> <p>The changelog of this release of JCM is missing. All changes will be listed based on the git commit. You may help by replacing this page with the original changelog from JCM v1.0.2 if found.</p>"},{"location":"players/versions/v1.0.2/#changes","title":"Changes","text":"<ul> <li>Butterfly light now works without doDaylightCycle on</li> <li>JCM now supports Minecraft versions from 1.16.5 - 1.18</li> </ul>"},{"location":"players/versions/v1.0.2/#download","title":"Download","text":"<ul> <li>Fabric 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.3/","title":"v1.0.3","text":"<p>Missing Changelog</p> <p>The changelog of this release of JCM is missing. All changes will be listed based on the git commit. You may help by replacing this page with the original changelog from JCM v1.0.3 if found.</p>"},{"location":"players/versions/v1.0.3/#changes","title":"Changes","text":"<ul> <li>Butterfly light now works without doDaylightCycle on</li> <li>JCM now supports Minecraft versions from 1.16.5 - 1.18</li> </ul>"},{"location":"players/versions/v1.0.3/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.16.5</li> <li>Fabric 1.17.1 MISSING</li> <li>Fabric 1.18 MISSING</li> </ul>"},{"location":"players/versions/v1.0.4/","title":"v1.0.4","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p> <p>JCM v1.0.4 is released, please backup your world before updating.</p>"},{"location":"players/versions/v1.0.4/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>Only MTR beta-9-unofficial-1</p>"},{"location":"players/versions/v1.0.4/#addition","title":"Addition","text":"<ul> <li>PIDS 1A (3 line version of PIDS 1)</li> <li>(Experimental) Railway Vision PIDS that shows in-game time and weather</li> <li>KCR East Rail Station Name Signs</li> <li>Automatic Iron Door (Opens within 3 block radius)</li> <li>Operator Only button (Pure decoration)</li> </ul>"},{"location":"players/versions/v1.0.4/#changes","title":"Changes","text":"<ul> <li>Mod now compatible with beta-9-unofficial-1, please update.</li> </ul>"},{"location":"players/versions/v1.0.4/#fixes","title":"Fixes","text":"<ul> <li>Departure Timer now resets the minute to 0 when over 60</li> <li>Standing Station Name Sign text overflowing</li> </ul>"},{"location":"players/versions/v1.0.4/#known-issues","title":"Known issues","text":"<ul> <li>Railway Vision PIDS might overflow on specific GPU, please report if you do get the bug</li> </ul>"},{"location":"players/versions/v1.0.4/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.16.5</li> <li>Fabric 1.17.1 MISSING</li> <li>Fabric 1.18 MISSING</li> </ul>"},{"location":"players/versions/v1.0.4a/","title":"v1.0.4a","text":""},{"location":"players/versions/v1.0.4a/#fixes","title":"Fixes","text":"<ul> <li>Platforms with multiple digit now displays correctly in RV PIDS</li> <li>Fix RV PIDS Platform Circle being black when using Shaders</li> <li>RV PIDS now show cars</li> </ul>"},{"location":"players/versions/v1.0.4a/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.16.5</li> <li>Fabric 1.17.1</li> <li>Fabric 1.18</li> </ul>"},{"location":"players/versions/v1.0.5/","title":"v1.0.5","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p>"},{"location":"players/versions/v1.0.5/#compatible-version","title":"Compatible Version","text":"<p>Only MTR beta-9-unofficial-2</p>"},{"location":"players/versions/v1.0.5/#addition","title":"Addition","text":"<ul> <li>Added Railway Vision PIDS Poles</li> <li>Added Buffer Stop</li> <li>Migrated mod to Architectury, now supports Fabric and Forge</li> </ul>"},{"location":"players/versions/v1.0.5/#fixes","title":"Fixes","text":"<ul> <li>The size of the Operator Only Button model is now more accurate</li> </ul>"},{"location":"players/versions/v1.0.5/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.5a/","title":"v1.0.5a","text":"<p>Missing Changelog</p> <p>The changelog of this release of JCM is missing. All changes will be listed based on the git commit. You may help by replacing this page with the original changelog from JCM v1.0.5a if found.</p>"},{"location":"players/versions/v1.0.5a/#fixes","title":"Fixes","text":"<ul> <li>Some capitalization changes for <code>block.jsblock.bufferstop_1</code> and <code>block.jsblock.op_button</code>.</li> <li>Fixes crash for Railway Vision PIDS when deleting a route.</li> </ul>"},{"location":"players/versions/v1.0.5a/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.6/","title":"v1.0.6","text":""},{"location":"players/versions/v1.0.6/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR beta-9-unofficial-3 -&gt; MTR beta-9-unofficial-5</p>"},{"location":"players/versions/v1.0.6/#fixes","title":"Fixes","text":"<ul> <li>License showing N/A on Fabric </li> <li>License showing MIT on Forge </li> <li>1.18 crashing when placing automatic iron door </li> <li>KCR Signage Floating </li> <li>KCR Signage Exit arrow keep flashing </li> <li>RV PIDS overflowing </li> </ul>"},{"location":"players/versions/v1.0.6/#changes","title":"Changes","text":"<ul> <li>Ceiling Light has been renamed to Spot Light, and made placeable on both the ground and the ceiling. </li> </ul>"},{"location":"players/versions/v1.0.6/#additions","title":"Additions","text":"<ul> <li>MTR Tall Helpline</li> <li>Thales Ticket Barrier</li> <li> <p>TKL LCD PIDS</p> </li> <li> <p>Mod Menu Settings, details below: </p> </li> <li> <ul> <li>Allow you to disable all rendering component of JCM if you suspect a crash/bug is caused by this mod. </li> </ul> </li> <li> <ul> <li>RV PIDS, TKL PIDS, Departure Timer and KCR Signage font now can change to other resource pack font in-game</li> </ul> </li> <li> <ul> <li>*Requires Mod Menu mod</li> </ul> </li> </ul>"},{"location":"players/versions/v1.0.6/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.7/","title":"v1.0.7","text":"<p>Joban Client Mod v1.0.7 is released, please backup your world before updating.</p>"},{"location":"players/versions/v1.0.7/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR beta-9-unofficial-3 -&gt; MTR beta-9-unofficial-5</p>"},{"location":"players/versions/v1.0.7/#fix","title":"Fix","text":"<ul> <li>Helpline now face towards player's direction</li> <li>Old TKL PIDS text overflow</li> <li>Departure Timer Font not saving properly</li> <li>Try fixing RV PIDS text overlapping</li> </ul>"},{"location":"players/versions/v1.0.7/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.8/","title":"v1.0.8","text":""},{"location":"players/versions/v1.0.8/#additions","title":"Additions","text":"<ul> <li>Added Sound Looper: Loop an in-game sound by a certain interval (Right click w/ brush)</li> <li>Added Exit Signs (Even)</li> </ul>"},{"location":"players/versions/v1.0.8/#fixes","title":"Fixes","text":"<ul> <li>PIDS appearing only at one side</li> <li>Minor Color Difference in TKL PID LCD Screen</li> </ul>"},{"location":"players/versions/v1.0.8/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18.x</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18.1</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.0.9/","title":"v1.0.9","text":"<p>Joban Client Mod v1.0.9 has been released, please backup your world before updating.</p>"},{"location":"players/versions/v1.0.9/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR beta-9-prerelease-2 -&gt; MTR 3.0.0</p>"},{"location":"players/versions/v1.0.9/#changes","title":"Changes","text":"<ul> <li>Update to MTR beta-9-prerelease-2</li> </ul>"},{"location":"players/versions/v1.0.9/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18.1</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.0/","title":"v1.1.0","text":""},{"location":"players/versions/v1.1.0/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR beta-9-prerelease-2 -&gt; MTR 3.0.0</p>"},{"location":"players/versions/v1.1.0/#additions","title":"Additions","text":"<ul> <li>RV PIDS Platform Number are now toggleable.</li> <li>(Experimental) Added South Island Line PIDS</li> <li>Added Tuen Ma Line Helpline (Mislabeled, should be Tuen Ma Line Standing Emergency Sign)</li> <li>Added KCR Emergency Stop Sign</li> </ul>"},{"location":"players/versions/v1.1.0/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18.x</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18.2</li> <li>Forge 1.18.1</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.0a/","title":"v1.1.0a","text":""},{"location":"players/versions/v1.1.0a/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>Only MTR 3.0.1-unofficial-3</p>"},{"location":"players/versions/v1.1.0a/#fixes","title":"Fixes","text":"<ul> <li>Fix crash when placing Standing station name block</li> </ul>"},{"location":"players/versions/v1.1.0a/#notes","title":"Notes","text":"<p>Despite the name, this is not a hotfix for v1.1.0, but rather a regular update to support newer versions of MTR.</p> <p>If you're running from MTR beta-9-prerelease-2 to MTR 3.0.0, this version will cause incompatibilities.</p>"},{"location":"players/versions/v1.1.0a/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18.x</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.1/","title":"v1.1.1","text":""},{"location":"players/versions/v1.1.1/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.0.1-unofficial-4 -&gt; UNCONFIRMED</p>"},{"location":"players/versions/v1.1.1/#addition","title":"Addition","text":"<ul> <li>Added Wall Mounted Enquiry Machine</li> <li>Added Railway Vision Enquiry Machine</li> <li>Added Standing Emergency Stop (SIL)</li> </ul>"},{"location":"players/versions/v1.1.1/#fixes","title":"Fixes","text":"<ul> <li>Right clicking RV PIDS with brush doesn't work</li> </ul>"},{"location":"players/versions/v1.1.1/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.18.x</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.18.2</li> <li>Forge 1.18.1</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.2/","title":"v1.1.2","text":""},{"location":"players/versions/v1.1.2/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>Only 3.0.1</p>"},{"location":"players/versions/v1.1.2/#addition","title":"Addition","text":"<ul> <li>KCR Enquiry Machine (Wall mounted)</li> <li>Station Ceiling Panel (w/ Ceiling Pole)</li> <li>New variants of SIL PIDS &amp; improved the original SIL PIDS.</li> <li>Added 1.19 support.</li> <li>Light Source Block: (Light Level can now be changed, and now displays an icon similar to barrier)</li> </ul>"},{"location":"players/versions/v1.1.2/#changes","title":"Changes","text":"<ul> <li>Auto Iron Door now opens/close quicker.</li> <li>Sound Looper can now be limited to a range between 2 coordinates.</li> <li>When you hide a row in the LCD PIDS &amp; RV PIDS, the next train entry will be pushed to the next row. '''See below for images.'''</li> <li>On the LCD PIDS &amp; RV PIDS, you can now use the following variables:  <code>{time}</code> - returns Minecraft daytime in HH:MM (24h)  <code>{weather}</code> - returns <code>Sunny</code>, <code>Thundering</code>, <code>Rainy</code></li> </ul>"},{"location":"players/versions/v1.1.2/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric 1.19</li> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.19</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.2/#new-pids-behavior","title":"New PIDS Behavior","text":"<p> [[File:JCM 1.1.2 PIDS Behavior.png|none|thumb|544x544px]]</p>"},{"location":"players/versions/v1.1.3/","title":"v1.1.3","text":""},{"location":"players/versions/v1.1.3/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>3.1.0-unofficial-1 -&gt; MTR 3.1.4</p>"},{"location":"players/versions/v1.1.3/#changes","title":"Changes","text":"<ul> <li>Support new MTR version</li> <li>Improve rendering</li> <li>Use animated texture for Buffer Stop</li> </ul>"},{"location":"players/versions/v1.1.3/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.19</li> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.19</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.4-hotfix-1/","title":"v1.1.4-hotfix-1","text":"<p>Joban Client Mod v1.1.4-hotfix-1 is released to address the issue in v1.1.4.</p> <p>(Optional on either Client/Server, but we strongly recommend updating both)</p>"},{"location":"players/versions/v1.1.4-hotfix-1/#fixes","title":"Fixes","text":"<ul> <li>Subsidy / Fare Saver GUI allows entering invalid data.</li> <li>Weather &amp; Clock on Tilted RV PIDS is displayed incorrectly</li> <li>Disconnects on Fabric 1.16.5 Dedicated Server when configuring PIDS</li> </ul>"},{"location":"players/versions/v1.1.4-hotfix-1/#downloads","title":"Downloads","text":"<ul> <li>Fabric 1.19 - 1.19.2</li> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.19 - 1.19.2</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.4/","title":"v1.1.4","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p>"},{"location":"players/versions/v1.1.4/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.0-unofficial-3 -&gt; MTR 3.1.4</p>"},{"location":"players/versions/v1.1.4/#additions","title":"Additions","text":"<ul> <li>Updated to support Minecraft 1.19.2</li> <li>Version check has been added for JCM</li> <li>MTR Stairs Block</li> <li>KCR Station Name Sign (Station Colored)</li> <li>PIDS Custom Preset (All RV PIDS &amp; LCD PIDS):  - Configurable when right clicked with brush  - Default Preset: <code>door_cls_apg</code>, <code>door_cls_psd</code>, <code>door_cls_train</code>  - Allow configuration for Background, Fonts, Fonts Color, Clock &amp; Weather Visibility (RV PIDS Only)  - Example Pack below</li> <li>New PIDS Variable:  <code>{weatherChin}</code> - Reports current world weather in chinese  <code>{worldPlayer}</code> - Current amount of player on the current world</li> <li>Subsidy Machine can now be configured  Right click with brush to configure the amount it discounts &amp; timeout</li> <li>Fare Saver  Right click with brush to configure the amount it discounts</li> </ul>"},{"location":"players/versions/v1.1.4/#changes","title":"Changes","text":"<ul> <li>The config menu has been redesigned  Now has a panorama background, along with the ability to view logs.</li> <li>Forge users can now configure JCM in the mod menu.</li> <li>Some proprietary fonts has been replaced with other open fonts. </li> <li>All client-side fonts options has been removed to allow more flexibility. </li> <li>Textures has been optimized to improve memory performance.</li> <li>Some textures has been updated to give a better look.</li> <li>Newly placed JCM Poles will now extend if there's a slab on top.</li> <li>Weather icon on the RV PIDS has been slightly altered to reflect the real life look.</li> <li>Invisible Light Block is no longer a block entity.  This should result in a very minor improvements for servers.</li> <li>Hitbox on certain block is made larger for easier placing.</li> </ul>"},{"location":"players/versions/v1.1.4/#fixes","title":"Fixes","text":"<ul> <li>The <code>{time}</code> variable on the RV/LCD PIDS now shows the correct time.</li> <li>On the LCD PIDS, the character \"\u7dab\" can now be rendered normally</li> </ul>"},{"location":"players/versions/v1.1.4/#notes","title":"Notes","text":"<ul> <li>The optimized textures now allows Minecraft to have a higher Mipmap level than 1 If you feel the textures are very blurry after this update, please go to Video Settings and turn the Mipmap Level down to 1 or OFF.</li> <li>This is a relatively major update While we have tested this on our servers before releasing, we can't guarantee any data loss with other players.</li> </ul>"},{"location":"players/versions/v1.1.4/#downloads","title":"Downloads","text":"<ul> <li>PIDS Preset Example Resource Pack (For v1.1.4)</li> <li>Fabric 1.19.x</li> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.19.x</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.5-hotfix-1/","title":"v1.1.5-hotfix-1","text":""},{"location":"players/versions/v1.1.5-hotfix-1/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.0-unofficial-3 -&gt; MTR 3.1.4</p>"},{"location":"players/versions/v1.1.5-hotfix-1/#changes","title":"Changes","text":"<ul> <li>Quality of config screen panorama background has been reduced, resulting in a smaller file size.</li> </ul>"},{"location":"players/versions/v1.1.5-hotfix-1/#fixes","title":"Fixes","text":"<ul> <li>Subsidy Machine will no longer allow your balance to overflow to negative</li> <li>Incorrect Station Ceiling Pole hitbox</li> <li>On Fabric 1.16.5, changing sound looper config will cause it to crash.</li> <li>Crash when launching on Forge 1.16.5</li> <li>Hide Arrivals not working with custom PIDS preset.</li> <li>MTR Version detected incorrectly</li> </ul>"},{"location":"players/versions/v1.1.5-hotfix-1/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric 1.16.5</li> <li>Fabric 1.17.1</li> <li>Fabric 1.18.x</li> <li>Fabric 1.19 - 1.19.2</li> <li>Forge 1.16.5</li> <li>Forge 1.17.1</li> <li>Forge 1.18.2</li> <li>Forge 1.19 - 1.19.2</li> </ul>"},{"location":"players/versions/v1.1.5/","title":"v1.1.5","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p>"},{"location":"players/versions/v1.1.5/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.0-unofficial-3 -&gt; MTR 3.1.0-unofficial-5-hotfix-1</p>"},{"location":"players/versions/v1.1.5/#addition","title":"Addition","text":"<ul> <li>JCM now checks for MTR Version, and will display a warning if the version is mismatched</li> <li>Station Colored Ceiling</li> <li>LRT Inter-Car Barrier</li> <li>LRT Trespass Sign</li> <li>KCR Name Sign &amp; Departure timer now has a font properties that you can change with <code>/data</code> command</li> </ul>"},{"location":"players/versions/v1.1.5/#changes","title":"Changes","text":"<ul> <li>Improved Fare Saver Model</li> <li>Water Machine now plays a \"splash\" sound when used.</li> <li>Circle Wall texture is now brighter</li> <li>Operators button now emit redstone signal, when right clicked with Driver Key</li> <li>KCR Station Name Sign (Station Colored) is now brighter and reflects the actual station color</li> <li>Subsidy Machine now clears your timeout if you right click it with a brush</li> <li>PIDS Preset:</li> <li> <ul> <li>Can now override arrival visibility</li> </ul> </li> <li> <ul> <li>Allow pushing the arrival to the next row even without hiding</li> </ul> </li> <li> <ul> <li>Added <code>{day}</code> variable - Returns the current in-game day in Minecraft</li> </ul> </li> </ul>"},{"location":"players/versions/v1.1.5/#fixes","title":"Fixes","text":"<ul> <li>The Blue Static Signal Light now locates at the bottom rather than top</li> <li>Some block having texture artifacts</li> <li>Station Ceiling are now centered and will look the same when placed in the opposite direction</li> <li>Subsidy Machine is no longer off-centered</li> <li>E44 Train Model is no longer off-centered</li> <li>Butterfly Light blinks incorrectly</li> <li>Not entering anything in Subsidy Machine/Fare Saver causes a crash</li> <li>3 Block Tall Structure replacing other blocks on top</li> <li>JCM Poles not automatically extending by itself when there's a slab on top</li> <li>Spot Light always places in the ceiling even when clicked at the bottom block</li> </ul>"},{"location":"players/versions/v1.1.5/#known-issues","title":"Known issues","text":"<ul> <li>On Fabric 1.16.5, updating Sound Looper will kick you out of the game. This will be fixed on the next release of JCM</li> </ul>"},{"location":"players/versions/v1.1.5/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>PIDS Preset Example Resource Pack (For v1.1.5)</li> <li>Fabric 1.19 - 1.19.2</li> <li>Fabric 1.18.2</li> <li>Fabric 1.17.1</li> <li>Fabric 1.16.5</li> <li>Forge 1.19 - 1.19.2</li> <li>Forge 1.18.2</li> <li>Forge 1.17.1</li> <li>Forge 1.16.5</li> </ul>"},{"location":"players/versions/v1.1.6-hotfix-1/","title":"v1.1.6-hotfix-1","text":""},{"location":"players/versions/v1.1.6-hotfix-1/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.5 -&gt; 3.1.11</p>"},{"location":"players/versions/v1.1.6-hotfix-1/#fixes","title":"Fixes","text":"<ul> <li>Can't walk through opened DRL APG</li> </ul>"},{"location":"players/versions/v1.1.6-hotfix-1/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric/Forge 1.16.5</li> <li>Fabric/Forge 1.17.1</li> <li>Fabric/Forge 1.18.x</li> <li>Fabric/Forge 1.19 - 1.19.2</li> </ul>"},{"location":"players/versions/v1.1.6/","title":"v1.1.6","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p>"},{"location":"players/versions/v1.1.6/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.5 -&gt; 3.1.11</p>"},{"location":"players/versions/v1.1.6/#addition","title":"Addition","text":"<ul> <li>Crafting recipes, some of the recipe is now listed on the wiki!</li> <li>Missing loot table for recently added blocks.</li> <li>Disneyland Resorts Line APG</li> </ul>"},{"location":"players/versions/v1.1.6/#changes","title":"Changes","text":"<ul> <li>All blocks now requires you to mine with a pickaxe for blocks to drop.</li> <li>Thales Ticket Barrier (Bare) can now be automatically attached to an MTR fence, simply place an MTR fence next to it and it will merge.</li> <li>Thales Ticket Barrier (Bare) no longer emits any light</li> <li>Butterfly Light (Time until it starts blinking) can now be configured</li> <li>The arrow in the KCR Emergency Stop Sign can now be toggled with brush.</li> <li>Operator Only Button now emits less light.</li> <li>Light Source Block will be replaced with another block when right clicked.</li> <li>Fabric and Forge jar is now merged into one.</li> </ul>"},{"location":"players/versions/v1.1.6/#fixes","title":"Fixes","text":"<ul> <li>Rare crash when placing down RV PIDS</li> <li>Incompatibilities with Debugify</li> <li>Platform number not showing on MTR 3.1.5</li> </ul>"},{"location":"players/versions/v1.1.6/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric/Forge 1.16.5</li> <li>Fabric/Forge 1.17.1</li> <li>Fabric/Forge 1.18.x</li> <li>Fabric/Forge 1.19 - 1.19.2</li> </ul>"},{"location":"players/versions/v1.1.7/","title":"v1.1.7","text":""},{"location":"players/versions/v1.1.7/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.8 -&gt; 3.1.11</p>"},{"location":"players/versions/v1.1.7/#fixes","title":"Fixes","text":"<ul> <li>Compatibility with MTR mod 3.1.8</li> </ul>"},{"location":"players/versions/v1.1.7/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric/Forge 1.16.5</li> <li>Fabric/Forge 1.17.1</li> <li>Fabric/Forge 1.18.x</li> <li>Fabric/Forge 1.19 - 1.19.2</li> </ul>"},{"location":"players/versions/v1.1.8/","title":"v1.1.8","text":""},{"location":"players/versions/v1.1.8/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.11 -&gt; 3.2.1</p>"},{"location":"players/versions/v1.1.8/#addition","title":"Addition","text":"<p>Minecraft 1.19.3 Support</p>"},{"location":"players/versions/v1.1.8/#changes","title":"Changes","text":"<ul> <li>Platform can now be selected on LCD PIDS</li> </ul>"},{"location":"players/versions/v1.1.8/#fixes","title":"Fixes","text":"<ul> <li>Compatibility with MTR mod 3.1.12</li> </ul>"},{"location":"players/versions/v1.1.8/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric/Forge 1.16.5</li> <li>Fabric/Forge 1.17.1</li> <li>Fabric/Forge 1.18.x</li> <li>Fabric/Forge 1.19 - 1.19.2</li> <li>Fabric/Forge 1.19.3</li> </ul>"},{"location":"players/versions/v1.1.9/","title":"v1.1.9","text":""},{"location":"players/versions/v1.1.9/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.1.11 -&gt; 3.2.1</p>"},{"location":"players/versions/v1.1.9/#changes","title":"Changes","text":"<ul> <li>More sound sources are now available for Sound Looper</li> <li>Railway Vision PIDS now supports selecting specific platform</li> </ul>"},{"location":"players/versions/v1.1.9/#fixes","title":"Fixes","text":"<ul> <li>Water machine now drops water bottle if there's not enough inventory space</li> <li>PIDS Preset not working on 1.19.3</li> </ul>"},{"location":"players/versions/v1.1.9/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Fabric/Forge 1.16.5</li> <li>Fabric/Forge 1.17.1</li> <li>Fabric/Forge 1.18.x</li> <li>Fabric/Forge 1.19 - 1.19.2</li> <li>Fabric/Forge 1.19.3</li> </ul>"},{"location":"players/versions/v1.2.0/","title":"v1.2.0","text":""},{"location":"players/versions/v1.2.0/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.2.1-hotfix-1 -&gt; MTR 3.2.2</p>"},{"location":"players/versions/v1.2.0/#changes","title":"Changes","text":"<ul> <li>Minecraft 1.19.4 Compatibility</li> </ul>"},{"location":"players/versions/v1.2.0/#fixes","title":"Fixes","text":"<ul> <li>The \"Hide Arrival\" toggle will now work with a PIDS Preset.</li> <li>Sound Looper now plays sound on Minecraft 1.19.3 and above</li> </ul>"},{"location":"players/versions/v1.2.0/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Minecraft 1.16.5</li> <li>Minecraft 1.17.1</li> <li>Minecraft 1.18.2</li> <li>Minecraft 1.19.2</li> <li>Minecraft 1.19.3</li> <li>Minecraft 1.19.4</li> </ul>"},{"location":"players/versions/v1.2.1-hotfix-1/","title":"v1.2.1-hotfix-1","text":"<p>This is a hotfix release intended to address an issue where the player would be kicked out when trying to edit the Joban LCD PIDS.</p> <p>You should install this on both client and server for the best experience.</p>"},{"location":"players/versions/v1.2.1-hotfix-1/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.2.2</p>"},{"location":"players/versions/v1.2.1-hotfix-1/#changes","title":"Changes","text":"<ul> <li>We have changed the configuration screen yet again!</li> <li>The JCM Version recognized by Fabric/Quilt/Forge has been changed from <code>&lt;minecraft_version&gt;-&lt;mod_version&gt;</code> to <code>&lt;mod_version&gt;+mc&lt;minecraft_version&gt;</code> to better align with SemVer and allow other mod developer to depend on a minimum JCM version if they requires.</li> </ul>"},{"location":"players/versions/v1.2.1-hotfix-1/#fixes","title":"Fixes","text":"<ul> <li>This fix a bug where the player would be kicked out of the server when they try to edit the LCD PIDS</li> </ul>"},{"location":"players/versions/v1.2.1-hotfix-1/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Minecraft 1.16.5</li> <li>Minecraft 1.17.1</li> <li>Minecraft 1.18.2</li> <li>Minecraft 1.19.2</li> <li>Minecraft 1.19.3</li> <li>Minecraft 1.19.4</li> </ul>"},{"location":"players/versions/v1.2.1/","title":"v1.2.1","text":"<p>Hotfix available</p> <p>A hotfix is available for this version, which usually fixes critical bug that may result in the game crashing/causing data losses. If you're looking to download this version, we strongly recommend downloading the hotfix version instead.</p>"},{"location":"players/versions/v1.2.1/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.2.2</p>"},{"location":"players/versions/v1.2.1/#changes","title":"Changes","text":"<ul> <li>The PIDS Preset Text Box will now display a list of available PIDS Preset when focused.</li> </ul>"},{"location":"players/versions/v1.2.1/#fixes","title":"Fixes","text":"<ul> <li>RV PIDS can now show color of multiple routes in the same platform</li> <li>Compatibility with MTR 3.2.2</li> <li>Ticket Barrier (Bare Metal) will no longer wrongly add fences if you place a fence in-front or after the barrier.</li> <li>RV PIDS's text is now further away from background, allowing player to view the PIDS content further without clipping issues.</li> </ul>"},{"location":"players/versions/v1.2.1/#further-notes","title":"Further notes","text":"<ul> <li>You should be able to safely enable MTR Fonts if you are running 1.17 or above, this is only a known issue on 1.16.5 as far as we are aware.</li> <li>It is currently known that Sound Looper would play Stereo Sound to everyone in the server.</li> </ul>"},{"location":"players/versions/v1.2.1/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Minecraft 1.16.5</li> <li>Minecraft 1.17.1</li> <li>Minecraft 1.18.2</li> <li>Minecraft 1.19.2</li> <li>Minecraft 1.19.3</li> <li>Minecraft 1.19.4</li> </ul>"},{"location":"players/versions/v1.2.2/","title":"v1.2.2","text":""},{"location":"players/versions/v1.2.2/#compatible-mtr-version","title":"Compatible MTR Version","text":"<p>MTR 3.2.2</p>"},{"location":"players/versions/v1.2.2/#changes","title":"Changes","text":"<ul> <li>Due to the possible frequent changes and refactoring of the main mod's PIDS system, all PIDS within JCM are now independent, as in they no longer rely on the main mod's PIDS to function. This should also hopefully mean future PIDS Update on the MTR mod will not crash and doesn't require us to push an update as fast as possible.</li> <li>PIDS Preset may now specify the color displayed when the PIDS is showing different cars.</li> <li>Fences on Thales Ticket Barrier (Bare) will no longer disappear as long as there's any block next to the barrier fence.</li> </ul>"},{"location":"players/versions/v1.2.2/#fixes","title":"Fixes","text":"<ul> <li>This fixes a bug where some block (like walls) would have a transparent side when a Spot Light is placed below.</li> <li>Butterfly light now blinks correctly to a fixed interval</li> </ul>"},{"location":"players/versions/v1.2.2/#minecraft-120","title":"Minecraft 1.20","text":"<p>This release adds an unofficially supported Minecraft 1.20 build.  </p> <p>Note that the official changes for 1.20 on the MTR mod has not been pushed, meaning we have to compile the mod with the 1.19.4 version of the MTR mod.</p> <p>As such, this build will be a bit rough around the edges. Unless your server has already been upgraded to 1.20, we recommend staying on 1.19.4 or below for the best experience.</p> <p>On Fabric, the blocks are located in a separate creative tab, while on Forge it is located in the vanilla redstone tab. No support for MC 1.20 will be given at the moment, use at your own risk (And with backup!).</p>"},{"location":"players/versions/v1.2.2/#downloads","title":"Downloads","text":"<p>Published on Modrinth, or download with the following links:</p> <ul> <li>Minecraft 1.16.5</li> <li>Minecraft 1.17.1</li> <li>Minecraft 1.18.2</li> <li>Minecraft 1.19.2</li> <li>Minecraft 1.19.3</li> <li>Minecraft 1.19.4</li> <li>Minecraft 1.20 (Not officially supported)</li> </ul>"}]}